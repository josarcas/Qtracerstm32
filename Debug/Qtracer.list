
Qtracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cbc  08008cbc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cc4  08008cc4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cc8  08008cc8  00018cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a8cc  2000008c  08008d58  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a958  08008d58  0002a958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021680  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa4  00000000  00000000  0004173c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  000451e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  00046a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b66  00000000  00000000  000480d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfb5  00000000  00000000  0006dc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec393  00000000  00000000  00089bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175f86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b8  00000000  00000000  00175fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008be0 	.word	0x08008be0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008be0 	.word	0x08008be0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200000a8 	.word	0x200000a8
 80004f8:	2000015c 	.word	0x2000015c

080004fc <uart_rx_handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//SERIAL COMMUNICATION
void uart_rx_handler(uint8_t data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	static uint16_t i=0;
	static uint16_t size_rx=0;

	pc_buffer_rx[i] = data;
 8000506:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <uart_rx_handler+0xb8>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	4619      	mov	r1, r3
 800050c:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <uart_rx_handler+0xbc>)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	5453      	strb	r3, [r2, r1]
	i++;
 8000512:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <uart_rx_handler+0xb8>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <uart_rx_handler+0xb8>)
 800051c:	801a      	strh	r2, [r3, #0]

	if(i==1)
 800051e:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <uart_rx_handler+0xb8>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d10d      	bne.n	8000542 <uart_rx_handler+0x46>
		if(pc_buffer_rx[0] != PC_READ_CMD || pc_buffer_rx[0] != PC_WRITE_CMD)
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <uart_rx_handler+0xbc>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b55      	cmp	r3, #85	; 0x55
 800052c:	d103      	bne.n	8000536 <uart_rx_handler+0x3a>
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <uart_rx_handler+0xbc>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2baa      	cmp	r3, #170	; 0xaa
 8000534:	d005      	beq.n	8000542 <uart_rx_handler+0x46>
		{
			i=0;
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <uart_rx_handler+0xb8>)
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]
			size_rx = 0;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <uart_rx_handler+0xc0>)
 800053e:	2200      	movs	r2, #0
 8000540:	801a      	strh	r2, [r3, #0]
		}
	if(i==5)
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <uart_rx_handler+0xb8>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	2b05      	cmp	r3, #5
 8000548:	d11b      	bne.n	8000582 <uart_rx_handler+0x86>
	{
		size_rx = pc_buffer_rx[1]<<8 | pc_buffer_rx[2];
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <uart_rx_handler+0xbc>)
 800054c:	785b      	ldrb	r3, [r3, #1]
 800054e:	021b      	lsls	r3, r3, #8
 8000550:	b21a      	sxth	r2, r3
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <uart_rx_handler+0xbc>)
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21b      	sxth	r3, r3
 800055c:	b29a      	uxth	r2, r3
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <uart_rx_handler+0xc0>)
 8000560:	801a      	strh	r2, [r3, #0]

		if(pc_buffer_rx[0] == PC_READ_CMD)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <uart_rx_handler+0xbc>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b55      	cmp	r3, #85	; 0x55
 8000568:	d10b      	bne.n	8000582 <uart_rx_handler+0x86>
		{
			i=0;
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <uart_rx_handler+0xb8>)
 800056c:	2200      	movs	r2, #0
 800056e:	801a      	strh	r2, [r3, #0]
			size_rx = 0;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <uart_rx_handler+0xc0>)
 8000572:	2200      	movs	r2, #0
 8000574:	801a      	strh	r2, [r3, #0]
			xSemaphoreGiveFromISR(serial_sem, NULL);
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <uart_rx_handler+0xc4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f006 fc52 	bl	8006e26 <xQueueGiveFromISR>
		}
	}
	if(size_rx == i+5)
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <uart_rx_handler+0xc0>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <uart_rx_handler+0xb8>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	3305      	adds	r3, #5
 800058e:	429a      	cmp	r2, r3
 8000590:	d10b      	bne.n	80005aa <uart_rx_handler+0xae>
	{
		i=0;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <uart_rx_handler+0xb8>)
 8000594:	2200      	movs	r2, #0
 8000596:	801a      	strh	r2, [r3, #0]
		size_rx = 0;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <uart_rx_handler+0xc0>)
 800059a:	2200      	movs	r2, #0
 800059c:	801a      	strh	r2, [r3, #0]
		xSemaphoreGiveFromISR(serial_sem, NULL);
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <uart_rx_handler+0xc4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 fc3e 	bl	8006e26 <xQueueGiveFromISR>
	}
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000035e 	.word	0x2000035e
 80005b8:	2000109c 	.word	0x2000109c
 80005bc:	20000360 	.word	0x20000360
 80005c0:	20001098 	.word	0x20001098

080005c4 <set_pot>:

//SPI COMMUNICATION
void set_pot(uint8_t value)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2]={0x11, value};
 80005ce:	2311      	movs	r3, #17
 80005d0:	733b      	strb	r3, [r7, #12]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f002 ff69 	bl	80034b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_PORT, buffer, 2, HAL_MAX_DELAY);
 80005e2:	f107 010c 	add.w	r1, r7, #12
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2202      	movs	r2, #2
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <set_pot+0x44>)
 80005ee:	f004 f9da 	bl	80049a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f002 ff5b 	bl	80034b4 <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200010d0 	.word	0x200010d0

0800060c <vce_test_handler>:

//TEST TYPE
void vce_test_handler()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

	HAL_DAC_SetValue(&hdac1, DAC_VCE_CH,
			DAC_ALIGN_12B_R, dac_buffer[dac_i]);
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <vce_test_handler+0x44>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <vce_test_handler+0x48>)
 800061a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800061e:	b29b      	uxth	r3, r3
	HAL_DAC_SetValue(&hdac1, DAC_VCE_CH,
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <vce_test_handler+0x4c>)
 8000626:	f002 fa15 	bl	8002a54 <HAL_DAC_SetValue>
	if(dac_i == 0)
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <vce_test_handler+0x44>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	b29b      	uxth	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d10a      	bne.n	800064a <vce_test_handler+0x3e>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer,
 8000634:	f644 2238 	movw	r2, #19000	; 0x4a38
 8000638:	4908      	ldr	r1, [pc, #32]	; (800065c <vce_test_handler+0x50>)
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <vce_test_handler+0x54>)
 800063c:	f001 faee 	bl	8001c1c <HAL_ADC_Start_DMA>
				ADC_SAMPLES);
		set_pot(system_data.pot_value);
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <vce_test_handler+0x58>)
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffbd 	bl	80005c4 <set_pot>
	}
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000035c 	.word	0x2000035c
 8000654:	200012f4 	.word	0x200012f4
 8000658:	20001084 	.word	0x20001084
 800065c:	20001488 	.word	0x20001488
 8000660:	2000117c 	.word	0x2000117c
 8000664:	20001074 	.word	0x20001074

08000668 <vbe_test_handler>:

void vbe_test_handler()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_VBE_CH, DAC_ALIGN_12B_R,
			dac_buffer[dac_i]);
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <vbe_test_handler+0x38>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <vbe_test_handler+0x3c>)
 8000676:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800067a:	b29b      	uxth	r3, r3
	HAL_DAC_SetValue(&hdac1, DAC_VBE_CH, DAC_ALIGN_12B_R,
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <vbe_test_handler+0x40>)
 8000682:	f002 f9e7 	bl	8002a54 <HAL_DAC_SetValue>
	if(dac_i == 0)
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <vbe_test_handler+0x38>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d105      	bne.n	800069c <vbe_test_handler+0x34>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer,
 8000690:	f644 2238 	movw	r2, #19000	; 0x4a38
 8000694:	4905      	ldr	r1, [pc, #20]	; (80006ac <vbe_test_handler+0x44>)
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <vbe_test_handler+0x48>)
 8000698:	f001 fac0 	bl	8001c1c <HAL_ADC_Start_DMA>
				ADC_SAMPLES);
	}
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000035c 	.word	0x2000035c
 80006a4:	200012f4 	.word	0x200012f4
 80006a8:	20001084 	.word	0x20001084
 80006ac:	20001488 	.word	0x20001488
 80006b0:	2000117c 	.word	0x2000117c

080006b4 <dac_gen>:

//DAC
void dac_gen()
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
	float t=0;
 80006ba:	f04f 0300 	mov.w	r3, #0
 80006be:	607b      	str	r3, [r7, #4]

    for(uint16_t i=0; i<DAC_SAMPLES; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	807b      	strh	r3, [r7, #2]
 80006c4:	e024      	b.n	8000710 <dac_gen+0x5c>
    {
        dac_buffer[i] = (((float)system_data.v_dac_max/(float)TIM_GEN_US)*t)*4095;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <dac_gen+0x70>)
 80006c8:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80006cc:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000728 <dac_gen+0x74>
 80006d0:	ee07 3a10 	vmov	s14, r3
 80006d4:	ee87 7a27 	vdiv.f32	s14, s14, s15
 80006d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80006dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006e0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800072c <dac_gen+0x78>
 80006e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ee:	ee17 2a90 	vmov	r2, s15
 80006f2:	b291      	uxth	r1, r2
 80006f4:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <dac_gen+0x7c>)
 80006f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        t += TIM_PERIOD_US;
 80006fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000734 <dac_gen+0x80>
 8000702:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000706:	edc7 7a01 	vstr	s15, [r7, #4]
    for(uint16_t i=0; i<DAC_SAMPLES; i++)
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	3301      	adds	r3, #1
 800070e:	807b      	strh	r3, [r7, #2]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	2bc8      	cmp	r3, #200	; 0xc8
 8000714:	d9d7      	bls.n	80006c6 <dac_gen+0x12>
    }
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	20001074 	.word	0x20001074
 8000728:	471c4000 	.word	0x471c4000
 800072c:	457ff000 	.word	0x457ff000
 8000730:	200012f4 	.word	0x200012f4
 8000734:	43480000 	.word	0x43480000

08000738 <user_att_task>:


//TASK
void user_att_task(void *args)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	uint8_t *sys_ptr = (uint8_t *)args;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60fb      	str	r3, [r7, #12]
	uint16_t mem_addr;

	for(;;)
	{
		if(xSemaphoreTake(serial_sem, 1000/portTICK_PERIOD_MS)
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <user_att_task+0x124>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800074c:	4618      	mov	r0, r3
 800074e:	f006 fbf7 	bl	8006f40 <xQueueSemaphoreTake>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d179      	bne.n	800084c <user_att_task+0x114>
				== pdTRUE)
		{

			mem_addr = pc_buffer_rx[3]<<8 | pc_buffer_rx[4];
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <user_att_task+0x128>)
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	b21a      	sxth	r2, r3
 8000760:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <user_att_task+0x128>)
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	b21b      	sxth	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b21b      	sxth	r3, r3
 800076a:	817b      	strh	r3, [r7, #10]
			if(pc_buffer_rx[0] == PC_WRITE_CMD)
 800076c:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <user_att_task+0x128>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2baa      	cmp	r3, #170	; 0xaa
 8000772:	d149      	bne.n	8000808 <user_att_task+0xd0>
			{
				memcpy(&sys_ptr[mem_addr], &pc_buffer_rx[5],
 8000774:	897b      	ldrh	r3, [r7, #10]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	18d0      	adds	r0, r2, r3
						pc_buffer_rx[1]<<8 | pc_buffer_rx[2]);
 800077a:	4b39      	ldr	r3, [pc, #228]	; (8000860 <user_att_task+0x128>)
 800077c:	785b      	ldrb	r3, [r3, #1]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	4a37      	ldr	r2, [pc, #220]	; (8000860 <user_att_task+0x128>)
 8000782:	7892      	ldrb	r2, [r2, #2]
 8000784:	4313      	orrs	r3, r2
				memcpy(&sys_ptr[mem_addr], &pc_buffer_rx[5],
 8000786:	461a      	mov	r2, r3
 8000788:	4936      	ldr	r1, [pc, #216]	; (8000864 <user_att_task+0x12c>)
 800078a:	f008 f94d 	bl	8008a28 <memcpy>

				switch(mem_addr)
 800078e:	897b      	ldrh	r3, [r7, #10]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d002      	beq.n	800079a <user_att_task+0x62>
 8000794:	2b05      	cmp	r3, #5
 8000796:	d034      	beq.n	8000802 <user_att_task+0xca>
				case V_DAC_MAX_OFF:
					dac_gen();
					break;

				default:
					break;
 8000798:	e052      	b.n	8000840 <user_att_task+0x108>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, system_data.curve_type);//Enable (VBE) or disable(VCE) rele
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <user_att_task+0x130>)
 800079c:	78db      	ldrb	r3, [r3, #3]
 800079e:	461a      	mov	r2, r3
 80007a0:	2108      	movs	r1, #8
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f002 fe85 	bl	80034b4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, system_data.curve_type);//Enalbe TSCSEL PIN for GAIN
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <user_att_task+0x130>)
 80007ac:	78db      	ldrb	r3, [r3, #3]
 80007ae:	461a      	mov	r2, r3
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	482d      	ldr	r0, [pc, #180]	; (800086c <user_att_task+0x134>)
 80007b6:	f002 fe7d 	bl	80034b4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);//Enable LED2 on board
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f002 fe77 	bl	80034b4 <HAL_GPIO_WritePin>
					if(system_data.curve_type)
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <user_att_task+0x130>)
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d009      	beq.n	80007e2 <user_att_task+0xaa>
						adc_ch_config.Channel = ADC_VBE_CH;
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <user_att_task+0x138>)
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <user_att_task+0x13c>)
 80007d2:	601a      	str	r2, [r3, #0]
						system_data.v_dac_max = 0.1;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <user_att_task+0x130>)
 80007d6:	3305      	adds	r3, #5
 80007d8:	4a27      	ldr	r2, [pc, #156]	; (8000878 <user_att_task+0x140>)
 80007da:	601a      	str	r2, [r3, #0]
						dac_gen();
 80007dc:	f7ff ff6a 	bl	80006b4 <dac_gen>
 80007e0:	e002      	b.n	80007e8 <user_att_task+0xb0>
						adc_ch_config.Channel = ADC_VCE_CH;
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <user_att_task+0x138>)
 80007e4:	4a25      	ldr	r2, [pc, #148]	; (800087c <user_att_task+0x144>)
 80007e6:	601a      	str	r2, [r3, #0]
					if (HAL_ADC_ConfigChannel(&hadc1, &adc_ch_config) != HAL_OK)
 80007e8:	4921      	ldr	r1, [pc, #132]	; (8000870 <user_att_task+0x138>)
 80007ea:	4825      	ldr	r0, [pc, #148]	; (8000880 <user_att_task+0x148>)
 80007ec:	f001 fab8 	bl	8001d60 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <user_att_task+0xc2>
						Error_Handler();
 80007f6:	f000 fb71 	bl	8000edc <Error_Handler>
					HAL_TIM_Base_Start_IT(DAC_TIM_PORT);
 80007fa:	4822      	ldr	r0, [pc, #136]	; (8000884 <user_att_task+0x14c>)
 80007fc:	f004 fbfe 	bl	8004ffc <HAL_TIM_Base_Start_IT>
					break;
 8000800:	e01e      	b.n	8000840 <user_att_task+0x108>
					dac_gen();
 8000802:	f7ff ff57 	bl	80006b4 <dac_gen>
					break;
 8000806:	e01b      	b.n	8000840 <user_att_task+0x108>
				}


			}
			else if(pc_buffer_rx[0] == PC_READ_CMD)
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <user_att_task+0x128>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b55      	cmp	r3, #85	; 0x55
 800080e:	d117      	bne.n	8000840 <user_att_task+0x108>
			{
				while(HAL_UART_Transmit_DMA(&huart1, &sys_ptr[mem_addr],
 8000810:	e002      	b.n	8000818 <user_att_task+0xe0>
						pc_buffer_rx[1]<<8 | pc_buffer_rx[2]) != HAL_OK)
					vTaskDelay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f006 feca 	bl	80075ac <vTaskDelay>
				while(HAL_UART_Transmit_DMA(&huart1, &sys_ptr[mem_addr],
 8000818:	897b      	ldrh	r3, [r7, #10]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	18d1      	adds	r1, r2, r3
						pc_buffer_rx[1]<<8 | pc_buffer_rx[2]) != HAL_OK)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <user_att_task+0x128>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	b21a      	sxth	r2, r3
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <user_att_task+0x128>)
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21b      	sxth	r3, r3
				while(HAL_UART_Transmit_DMA(&huart1, &sys_ptr[mem_addr],
 8000830:	b29b      	uxth	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	4814      	ldr	r0, [pc, #80]	; (8000888 <user_att_task+0x150>)
 8000836:	f004 fee1 	bl	80055fc <HAL_UART_Transmit_DMA>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1e8      	bne.n	8000812 <user_att_task+0xda>
			}

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	4811      	ldr	r0, [pc, #68]	; (800088c <user_att_task+0x154>)
 8000846:	f002 fe35 	bl	80034b4 <HAL_GPIO_WritePin>
 800084a:	e77b      	b.n	8000744 <user_att_task+0xc>
		}
		else
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800084c:	2102      	movs	r1, #2
 800084e:	480f      	ldr	r0, [pc, #60]	; (800088c <user_att_task+0x154>)
 8000850:	f002 fe48 	bl	80034e4 <HAL_GPIO_TogglePin>
			system_data.status = DISCONNECT;
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <user_att_task+0x130>)
 8000856:	2200      	movs	r2, #0
 8000858:	705a      	strb	r2, [r3, #1]
		if(xSemaphoreTake(serial_sem, 1000/portTICK_PERIOD_MS)
 800085a:	e773      	b.n	8000744 <user_att_task+0xc>
 800085c:	20001098 	.word	0x20001098
 8000860:	2000109c 	.word	0x2000109c
 8000864:	200010a1 	.word	0x200010a1
 8000868:	20001074 	.word	0x20001074
 800086c:	48000400 	.word	0x48000400
 8000870:	20000000 	.word	0x20000000
 8000874:	43210000 	.word	0x43210000
 8000878:	3dcccccd 	.word	0x3dcccccd
 800087c:	3ac04000 	.word	0x3ac04000
 8000880:	2000117c 	.word	0x2000117c
 8000884:	2000a8fc 	.word	0x2000a8fc
 8000888:	20001228 	.word	0x20001228
 800088c:	48000800 	.word	0x48000800

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fe18 	bl	80014ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f863 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 fa31 	bl	8000d04 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008a2:	f000 f8b1 	bl	8000a08 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008a6:	f000 f91f 	bl	8000ae8 <MX_DAC1_Init>
  MX_SPI3_Init();
 80008aa:	f000 f959 	bl	8000b60 <MX_SPI3_Init>
  MX_DMA_Init();
 80008ae:	f000 f9fb 	bl	8000ca8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008b2:	f000 f9c9 	bl	8000c48 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 80008b6:	f000 f991 	bl	8000bdc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  system_data.version = SYS_VERSION;
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <main+0xb4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<10; i++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	77fb      	strb	r3, [r7, #31]
 80008c4:	e009      	b.n	80008da <main+0x4a>
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1); //Toggle LED1 on board
 80008c6:	2102      	movs	r1, #2
 80008c8:	481f      	ldr	r0, [pc, #124]	; (8000948 <main+0xb8>)
 80008ca:	f002 fe0b 	bl	80034e4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fe70 	bl	80015b4 <HAL_Delay>
  for(uint8_t i=0; i<10; i++)
 80008d4:	7ffb      	ldrb	r3, [r7, #31]
 80008d6:	3301      	adds	r3, #1
 80008d8:	77fb      	strb	r3, [r7, #31]
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	2b09      	cmp	r3, #9
 80008de:	d9f2      	bls.n	80008c6 <main+0x36>
  }

  //INIT PPERIPHERALS
  HAL_UART_Receive_DMA(&huart1, &pc_byte_rx, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	491a      	ldr	r1, [pc, #104]	; (800094c <main+0xbc>)
 80008e4:	481a      	ldr	r0, [pc, #104]	; (8000950 <main+0xc0>)
 80008e6:	f004 ff19 	bl	800571c <HAL_UART_Receive_DMA>
  HAL_DAC_Start(&hdac1, DAC_VCE_CH);
 80008ea:	2110      	movs	r1, #16
 80008ec:	4819      	ldr	r0, [pc, #100]	; (8000954 <main+0xc4>)
 80008ee:	f002 f864 	bl	80029ba <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_VBE_CH);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <main+0xc4>)
 80008f6:	f002 f860 	bl	80029ba <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_VCE_CH, DAC_ALIGN_12B_R, 0);
 80008fa:	2300      	movs	r3, #0
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	4814      	ldr	r0, [pc, #80]	; (8000954 <main+0xc4>)
 8000902:	f002 f8a7 	bl	8002a54 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_VBE_CH, DAC_ALIGN_12B_R, 0);
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <main+0xc4>)
 800090e:	f002 f8a1 	bl	8002a54 <HAL_DAC_SetValue>
  set_pot(255);
 8000912:	20ff      	movs	r0, #255	; 0xff
 8000914:	f7ff fe56 	bl	80005c4 <set_pot>

  //FREERTOS
  /*Semaphores*/
  serial_sem = xSemaphoreCreateBinary();
 8000918:	2203      	movs	r2, #3
 800091a:	2100      	movs	r1, #0
 800091c:	2001      	movs	r0, #1
 800091e:	f006 fa29 	bl	8006d74 <xQueueGenericCreate>
 8000922:	4603      	mov	r3, r0
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <main+0xc8>)
 8000926:	6013      	str	r3, [r2, #0]

  /*Task*/
  xTaskCreate(user_att_task, "USER", 128, (void*)&system_data, 5, NULL);
 8000928:	2300      	movs	r3, #0
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2305      	movs	r3, #5
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <main+0xb4>)
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	4909      	ldr	r1, [pc, #36]	; (800095c <main+0xcc>)
 8000936:	480a      	ldr	r0, [pc, #40]	; (8000960 <main+0xd0>)
 8000938:	f006 fceb 	bl	8007312 <xTaskCreate>

  /*Init FreeRTOS*/
  vTaskStartScheduler();
 800093c:	f006 fe6a 	bl	8007614 <vTaskStartScheduler>
  while(1);
 8000940:	e7fe      	b.n	8000940 <main+0xb0>
 8000942:	bf00      	nop
 8000944:	20001074 	.word	0x20001074
 8000948:	48000800 	.word	0x48000800
 800094c:	2000a8f8 	.word	0x2000a8f8
 8000950:	20001228 	.word	0x20001228
 8000954:	20001084 	.word	0x20001084
 8000958:	20001098 	.word	0x20001098
 800095c:	08008c04 	.word	0x08008c04
 8000960:	08000739 	.word	0x08000739

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	; 0x58
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2244      	movs	r2, #68	; 0x44
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f008 f866 	bl	8008a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000986:	f44f 7000 	mov.w	r0, #512	; 0x200
 800098a:	f002 fdd3 	bl	8003534 <HAL_PWREx_ControlVoltageScaling>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000994:	f000 faa2 	bl	8000edc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000998:	2310      	movs	r3, #16
 800099a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009ac:	2301      	movs	r3, #1
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009b4:	2328      	movs	r3, #40	; 0x28
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b8:	2307      	movs	r3, #7
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fe09 	bl	80035e0 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009d4:	f000 fa82 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2303      	movs	r3, #3
 80009de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	2104      	movs	r1, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 fa07 	bl	8003e04 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009fc:	f000 fa6e 	bl	8000edc <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3758      	adds	r7, #88	; 0x58
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a20:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <MX_ADC1_Init+0xd8>)
 8000a22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a26:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8000a2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a32:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a80:	4816      	ldr	r0, [pc, #88]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000a82:	f000 ff83 	bl	800198c <HAL_ADC_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a8c:	f000 fa26 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_ADC1_Init+0xdc>)
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a94:	2306      	movs	r3, #6
 8000a96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9c:	237f      	movs	r3, #127	; 0x7f
 8000a9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000aae:	f001 f957 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000ab8:	f000 fa10 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000abc:	230c      	movs	r3, #12
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_ADC1_Init+0xd4>)
 8000ac6:	f001 f94b 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000ad0:	f000 fa04 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000117c 	.word	0x2000117c
 8000ae0:	50040000 	.word	0x50040000
 8000ae4:	3ef08000 	.word	0x3ef08000

08000ae8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2224      	movs	r2, #36	; 0x24
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 ffa5 	bl	8008a44 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_DAC1_Init+0x70>)
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <MX_DAC1_Init+0x74>)
 8000afe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b00:	4815      	ldr	r0, [pc, #84]	; (8000b58 <MX_DAC1_Init+0x70>)
 8000b02:	f001 ff38 	bl	8002976 <HAL_DAC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b0c:	f000 f9e6 	bl	8000edc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <MX_DAC1_Init+0x70>)
 8000b2c:	f001 ffb7 	bl	8002a9e <HAL_DAC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 f9d1 	bl	8000edc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_DAC1_Init+0x70>)
 8000b42:	f001 ffac 	bl	8002a9e <HAL_DAC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000b4c:	f000 f9c6 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20001084 	.word	0x20001084
 8000b5c:	40007400 	.word	0x40007400

08000b60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <MX_SPI3_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b78:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b80:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b98:	2220      	movs	r2, #32
 8000b9a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_SPI3_Init+0x74>)
 8000bc2:	f003 fe4d 	bl	8004860 <HAL_SPI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 f986 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200010d0 	.word	0x200010d0
 8000bd8:	40003c00 	.word	0x40003c00

08000bdc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_TIM7_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bf4:	224f      	movs	r2, #79	; 0x4f
 8000bf6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c00:	22c7      	movs	r2, #199	; 0xc7
 8000c02:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c0c:	f004 f99e 	bl	8004f4c <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000c16:	f000 f961 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c28:	f004 fc16 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f000 f953 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000a8fc 	.word	0x2000a8fc
 8000c44:	40001400 	.word	0x40001400

08000c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_USART1_UART_Init+0x5c>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USART1_UART_Init+0x58>)
 8000c8c:	f004 fc68 	bl	8005560 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c96:	f000 f921 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20001228 	.word	0x20001228
 8000ca4:	40013800 	.word	0x40013800

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_DMA_Init+0x58>)
 8000cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <MX_DMA_Init+0x58>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_DMA_Init+0x58>)
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2105      	movs	r1, #5
 8000cca:	200b      	movs	r0, #11
 8000ccc:	f001 fe1d 	bl	800290a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd0:	200b      	movs	r0, #11
 8000cd2:	f001 fe36 	bl	8002942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	200e      	movs	r0, #14
 8000cdc:	f001 fe15 	bl	800290a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ce0:	200e      	movs	r0, #14
 8000ce2:	f001 fe2e 	bl	8002942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	200f      	movs	r0, #15
 8000cec:	f001 fe0d 	bl	800290a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	f001 fe26 	bl	8002942 <HAL_NVIC_EnableIRQ>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a30      	ldr	r2, [pc, #192]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2102      	movs	r1, #2
 8000d66:	482b      	ldr	r0, [pc, #172]	; (8000e14 <MX_GPIO_Init+0x110>)
 8000d68:	f002 fba4 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2101      	movs	r1, #1
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f002 fb9e 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	210e      	movs	r1, #14
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f002 fb98 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	4823      	ldr	r0, [pc, #140]	; (8000e18 <MX_GPIO_Init+0x114>)
 8000d8c:	f002 fb92 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	481b      	ldr	r0, [pc, #108]	; (8000e14 <MX_GPIO_Init+0x110>)
 8000da8:	f002 fa0a 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f002 f9fb 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dca:	230e      	movs	r3, #14
 8000dcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f002 f9ec 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_GPIO_Init+0x114>)
 8000e02:	f002 f9dd 	bl	80031c0 <HAL_GPIO_Init>

}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	if(huart->Instance == PC_UART_INSTANCE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <HAL_UART_RxCpltCallback+0x24>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d104      	bne.n	8000e38 <HAL_UART_RxCpltCallback+0x1c>
		uart_rx_handler(pc_byte_rx);
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_UART_RxCpltCallback+0x28>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb62 	bl	80004fc <uart_rx_handler>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40013800 	.word	0x40013800
 8000e44:	2000a8f8 	.word	0x2000a8f8

08000e48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == DAC_TIM_INS)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d132      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if(system_data.curve_type)
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e5c:	78db      	ldrb	r3, [r3, #3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x20>
			vbe_test_handler();
 8000e62:	f7ff fc01 	bl	8000668 <vbe_test_handler>
 8000e66:	e001      	b.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x24>
		else
			vce_test_handler();
 8000e68:	f7ff fbd0 	bl	800060c <vce_test_handler>

		dac_i++;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e78:	801a      	strh	r2, [r3, #0]

		if(dac_i==DAC_SAMPLES)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	2bc9      	cmp	r3, #201	; 0xc9
 8000e82:	d11d      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			dac_i=0;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	801a      	strh	r2, [r3, #0]
			system_data.mode = STOP_MODE;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	709a      	strb	r2, [r3, #2]
			HAL_TIM_Base_Stop_IT(DAC_TIM_PORT);
 8000e90:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e92:	f004 f907 	bl	80050a4 <HAL_TIM_Base_Stop_IT>
			HAL_DAC_SetValue(&hdac1, DAC_VCE_CH, DAC_ALIGN_12B_R, 0);
 8000e96:	2300      	movs	r3, #0
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e9e:	f001 fdd9 	bl	8002a54 <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac1, DAC_VBE_CH, DAC_ALIGN_12B_R, 0);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000eaa:	f001 fdd3 	bl	8002a54 <HAL_DAC_SetValue>
			set_pot(255);
 8000eae:	20ff      	movs	r0, #255	; 0xff
 8000eb0:	f7ff fb88 	bl	80005c4 <set_pot>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);//Disable LED2 on board
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f002 fafa 	bl	80034b4 <HAL_GPIO_WritePin>
		}
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40001400 	.word	0x40001400
 8000ecc:	20001074 	.word	0x20001074
 8000ed0:	2000035c 	.word	0x2000035c
 8000ed4:	2000a8fc 	.word	0x2000a8fc
 8000ed8:	20001084 	.word	0x20001084

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <Error_Handler+0x30>)
 8000ee8:	f002 fafc 	bl	80034e4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000eec:	2102      	movs	r1, #2
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f002 faf7 	bl	80034e4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f002 faf2 	bl	80034e4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f04:	f000 fb56 	bl	80015b4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000f08:	e7ec      	b.n	8000ee4 <Error_Handler+0x8>
 8000f0a:	bf00      	nop
 8000f0c:	48000800 	.word	0x48000800

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6613      	str	r3, [r2, #96]	; 0x60
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	210f      	movs	r1, #15
 8000f4a:	f06f 0001 	mvn.w	r0, #1
 8000f4e:	f001 fcdc 	bl	800290a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0a2      	sub	sp, #136	; 0x88
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	225c      	movs	r2, #92	; 0x5c
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 fd5f 	bl	8008a44 <memset>
  if(hadc->Instance==ADC1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a3f      	ldr	r2, [pc, #252]	; (8001088 <HAL_ADC_MspInit+0x128>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d176      	bne.n	800107e <HAL_ADC_MspInit+0x11e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f96:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000f9a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 f953 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fac:	f7ff ff96 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a35      	ldr	r2, [pc, #212]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a2f      	ldr	r2, [pc, #188]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_ADC_MspInit+0x12c>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001008:	4619      	mov	r1, r3
 800100a:	4821      	ldr	r0, [pc, #132]	; (8001090 <HAL_ADC_MspInit+0x130>)
 800100c:	f002 f8d8 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001010:	2303      	movs	r3, #3
 8001012:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001014:	230b      	movs	r3, #11
 8001016:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001020:	4619      	mov	r1, r3
 8001022:	481c      	ldr	r0, [pc, #112]	; (8001094 <HAL_ADC_MspInit+0x134>)
 8001024:	f002 f8cc 	bl	80031c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_ADC_MspInit+0x138>)
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <HAL_ADC_MspInit+0x13c>)
 800102c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_ADC_MspInit+0x138>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_ADC_MspInit+0x138>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001064:	f001 fe36 	bl	8002cd4 <HAL_DMA_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 800106e:	f7ff ff35 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_ADC_MspInit+0x138>)
 8001076:	64da      	str	r2, [r3, #76]	; 0x4c
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_ADC_MspInit+0x138>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3788      	adds	r7, #136	; 0x88
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	50040000 	.word	0x50040000
 800108c:	40021000 	.word	0x40021000
 8001090:	48000800 	.word	0x48000800
 8001094:	48000400 	.word	0x48000400
 8001098:	200012ac 	.word	0x200012ac
 800109c:	40020008 	.word	0x40020008

080010a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a15      	ldr	r2, [pc, #84]	; (8001114 <HAL_DAC_MspInit+0x74>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d124      	bne.n	800110c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_DAC_MspInit+0x78>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_DAC_MspInit+0x78>)
 80010c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010cc:	6593      	str	r3, [r2, #88]	; 0x58
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_DAC_MspInit+0x78>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_DAC_MspInit+0x78>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_DAC_MspInit+0x78>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_DAC_MspInit+0x78>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010f2:	2330      	movs	r3, #48	; 0x30
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f002 f85a 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40007400 	.word	0x40007400
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a25      	ldr	r2, [pc, #148]	; (80011d0 <HAL_SPI_MspInit+0xb4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d144      	bne.n	80011c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 8001144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_SPI_MspInit+0xb8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC12     ------> SPI3_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001198:	2306      	movs	r3, #6
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_SPI_MspInit+0xbc>)
 80011a4:	f002 f80c 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011a8:	2308      	movs	r3, #8
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b8:	2306      	movs	r3, #6
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <HAL_SPI_MspInit+0xc0>)
 80011c4:	f001 fffc 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40003c00 	.word	0x40003c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000400 	.word	0x48000400

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d113      	bne.n	800121a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_TIM_Base_MspInit+0x48>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_TIM_Base_MspInit+0x48>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_TIM_Base_MspInit+0x48>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2105      	movs	r1, #5
 800120e:	2037      	movs	r0, #55	; 0x37
 8001210:	f001 fb7b 	bl	800290a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001214:	2037      	movs	r0, #55	; 0x37
 8001216:	f001 fb94 	bl	8002942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40001400 	.word	0x40001400
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0a0      	sub	sp, #128	; 0x80
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	225c      	movs	r2, #92	; 0x5c
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f007 fbf9 	bl	8008a44 <memset>
  if(huart->Instance==USART1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_UART_MspInit+0x164>)
 8001258:	4293      	cmp	r3, r2
 800125a:	f040 8094 	bne.w	8001386 <HAL_UART_MspInit+0x15a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800125e:	2301      	movs	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4618      	mov	r0, r3
 800126c:	f002 ffee 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001276:	f7ff fe31 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_UART_MspInit+0x168>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	4a45      	ldr	r2, [pc, #276]	; (8001394 <HAL_UART_MspInit+0x168>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6613      	str	r3, [r2, #96]	; 0x60
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_UART_MspInit+0x168>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <HAL_UART_MspInit+0x168>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a3f      	ldr	r2, [pc, #252]	; (8001394 <HAL_UART_MspInit+0x168>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_UART_MspInit+0x168>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012bc:	2307      	movs	r3, #7
 80012be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f001 ff79 	bl	80031c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012d0:	4a32      	ldr	r2, [pc, #200]	; (800139c <HAL_UART_MspInit+0x170>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_UART_MspInit+0x16c>)
 80012fa:	2220      	movs	r2, #32
 80012fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_UART_MspInit+0x16c>)
 8001300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001304:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001306:	4824      	ldr	r0, [pc, #144]	; (8001398 <HAL_UART_MspInit+0x16c>)
 8001308:	f001 fce4 	bl	8002cd4 <HAL_DMA_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8001312:	f7ff fde3 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_UART_MspInit+0x16c>)
 800131a:	671a      	str	r2, [r3, #112]	; 0x70
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_UART_MspInit+0x16c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_UART_MspInit+0x174>)
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_UART_MspInit+0x178>)
 8001326:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_UART_MspInit+0x174>)
 800132a:	2202      	movs	r2, #2
 800132c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_UART_MspInit+0x174>)
 8001330:	2210      	movs	r2, #16
 8001332:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_UART_MspInit+0x174>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0x174>)
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0x174>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_UART_MspInit+0x174>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0x174>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_UART_MspInit+0x174>)
 8001354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001358:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x174>)
 800135c:	f001 fcba 	bl	8002cd4 <HAL_DMA_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001366:	f7ff fdb9 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <HAL_UART_MspInit+0x174>)
 800136e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <HAL_UART_MspInit+0x174>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	2025      	movs	r0, #37	; 0x25
 800137c:	f001 fac5 	bl	800290a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001380:	2025      	movs	r0, #37	; 0x25
 8001382:	f001 fade 	bl	8002942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3780      	adds	r7, #128	; 0x80
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40013800 	.word	0x40013800
 8001394:	40021000 	.word	0x40021000
 8001398:	200011e0 	.word	0x200011e0
 800139c:	40020058 	.word	0x40020058
 80013a0:	20001134 	.word	0x20001134
 80013a4:	40020044 	.word	0x40020044

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 f8cc 	bl	8001574 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013dc:	f006 fd2c 	bl	8007e38 <xTaskGetSchedulerState>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013e6:	f007 f87f 	bl	80084e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <DMA1_Channel1_IRQHandler+0x10>)
 80013f6:	f001 fe04 	bl	8003002 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200012ac 	.word	0x200012ac

08001404 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA1_Channel4_IRQHandler+0x10>)
 800140a:	f001 fdfa 	bl	8003002 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20001134 	.word	0x20001134

08001418 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Channel5_IRQHandler+0x10>)
 800141e:	f001 fdf0 	bl	8003002 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200011e0 	.word	0x200011e0

0800142c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USART1_IRQHandler+0x10>)
 8001432:	f004 f9c9 	bl	80057c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20001228 	.word	0x20001228

08001440 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM7_IRQHandler+0x10>)
 8001446:	f003 fe5c 	bl	8005102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000a8fc 	.word	0x2000a8fc

08001454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800147c:	f7ff ffea 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	; (80014c4 <LoopForever+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f007 fa99 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff f9f1 	bl	8000890 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80014bc:	08008ccc 	.word	0x08008ccc
  ldr r2, =_sbss
 80014c0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80014c4:	2000a958 	.word	0x2000a958

080014c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_IRQHandler>

080014ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f001 fa0d 	bl	80028f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014da:	200f      	movs	r0, #15
 80014dc:	f000 f80e 	bl	80014fc <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	e001      	b.n	80014f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ec:	f7ff fd10 	bl	8000f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_InitTick+0x6c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_InitTick+0x70>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fa19 	bl	800295e <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d809      	bhi.n	800154c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f001 f9e3 	bl	800290a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e007      	b.n	800155c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e004      	b.n	800155c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e001      	b.n	800155c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000020 	.word	0x20000020
 800156c:	20000018 	.word	0x20000018
 8001570:	2000001c 	.word	0x2000001c

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000020 	.word	0x20000020
 8001598:	2000a948 	.word	0x2000a948

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2000a948 	.word	0x2000a948

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000020 	.word	0x20000020

080015fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3360      	adds	r3, #96	; 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <LL_ADC_SetOffset+0x44>)
 8001686:	4013      	ands	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	4313      	orrs	r3, r2
 8001694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	03fff000 	.word	0x03fff000

080016ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3360      	adds	r3, #96	; 0x60
 80016ba:	461a      	mov	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3360      	adds	r3, #96	; 0x60
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3330      	adds	r3, #48	; 0x30
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	4413      	add	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	211f      	movs	r1, #31
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0e9b      	lsrs	r3, r3, #26
 800176c:	f003 011f 	and.w	r1, r3, #31
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	431a      	orrs	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3314      	adds	r3, #20
 800179c:	461a      	mov	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	0e5b      	lsrs	r3, r3, #25
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	0d1b      	lsrs	r3, r3, #20
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2107      	movs	r1, #7
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	401a      	ands	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0d1b      	lsrs	r3, r3, #20
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	431a      	orrs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017d6:	bf00      	nop
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0318 	and.w	r3, r3, #24
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001808:	40d9      	lsrs	r1, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	400b      	ands	r3, r1
 800180e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001812:	431a      	orrs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	0007ffff 	.word	0x0007ffff

0800182c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800183c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6093      	str	r3, [r2, #8]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001864:	d101      	bne.n	800186a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800188c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018b4:	d101      	bne.n	80018ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <LL_ADC_IsEnabled+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_ADC_IsEnabled+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001926:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800192a:	f043 0204 	orr.w	r2, r3, #4
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b04      	cmp	r3, #4
 8001950:	d101      	bne.n	8001956 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b08      	cmp	r3, #8
 8001976:	d101      	bne.n	800197c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e12c      	b.n	8001c00 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fad3 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff3f 	bl	8001850 <LL_ADC_IsDeepPowerDownEnabled>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff25 	bl	800182c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff5a 	bl	80018a0 <LL_ADC_IsInternalRegulatorEnabled>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d115      	bne.n	8001a1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff3e 	bl	8001878 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019fc:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <HAL_ADC_Init+0x27c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	4a82      	ldr	r2, [pc, #520]	; (8001c0c <HAL_ADC_Init+0x280>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	099b      	lsrs	r3, r3, #6
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff3c 	bl	80018a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	f043 0210 	orr.w	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff75 	bl	800193e <LL_ADC_REG_IsConversionOngoing>
 8001a54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 80c5 	bne.w	8001bee <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 80c1 	bne.w	8001bee <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff35 	bl	80018f0 <LL_ADC_IsEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a8c:	4860      	ldr	r0, [pc, #384]	; (8001c10 <HAL_ADC_Init+0x284>)
 8001a8e:	f7ff ff2f 	bl	80018f0 <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	485d      	ldr	r0, [pc, #372]	; (8001c14 <HAL_ADC_Init+0x288>)
 8001aa0:	f7ff fdac 	bl	80015fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e5b      	ldrb	r3, [r3, #25]
 8001aa8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ab4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	045b      	lsls	r3, r3, #17
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <HAL_ADC_Init+0x28c>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff12 	bl	800193e <LL_ADC_REG_IsConversionOngoing>
 8001b1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff1f 	bl	8001964 <LL_ADC_INJ_IsConversionOngoing>
 8001b26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d13d      	bne.n	8001baa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d13a      	bne.n	8001baa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b38:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b40:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b50:	f023 0302 	bic.w	r3, r3, #2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	69b9      	ldr	r1, [r7, #24]
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d118      	bne.n	8001b9a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	e007      	b.n	8001baa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10c      	bne.n	8001bcc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f023 010f 	bic.w	r1, r3, #15
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bca:	e007      	b.n	8001bdc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020f 	bic.w	r2, r2, #15
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	f023 0303 	bic.w	r3, r3, #3
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
 8001bec:	e007      	b.n	8001bfe <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f043 0210 	orr.w	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000018 	.word	0x20000018
 8001c0c:	053e2d63 	.word	0x053e2d63
 8001c10:	50040000 	.word	0x50040000
 8001c14:	50040300 	.word	0x50040300
 8001c18:	fff0c007 	.word	0xfff0c007

08001c1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe86 	bl	800193e <LL_ADC_REG_IsConversionOngoing>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d167      	bne.n	8001d08 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Start_DMA+0x2a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e063      	b.n	8001d0e <HAL_ADC_Start_DMA+0xf2>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fc66 	bl	8002520 <ADC_Enable>
 8001c54:	4603      	mov	r3, r0
 8001c56:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d14f      	bne.n	8001cfe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	f023 0206 	bic.w	r2, r3, #6
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	659a      	str	r2, [r3, #88]	; 0x58
 8001c8a:	e002      	b.n	8001c92 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <HAL_ADC_Start_DMA+0xfc>)
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_ADC_Start_DMA+0x100>)
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_ADC_Start_DMA+0x104>)
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	221c      	movs	r2, #28
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0210 	orr.w	r2, r2, #16
 8001cc8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3340      	adds	r3, #64	; 0x40
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f001 f8ab 	bl	8002e44 <HAL_DMA_Start_IT>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fe0d 	bl	8001916 <LL_ADC_REG_StartConversion>
 8001cfc:	e006      	b.n	8001d0c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d06:	e001      	b.n	8001d0c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	0800262d 	.word	0x0800262d
 8001d1c:	08002705 	.word	0x08002705
 8001d20:	08002721 	.word	0x08002721

08001d24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0b6      	sub	sp, #216	; 0xd8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x22>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e3b9      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x796>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fdd5 	bl	800193e <LL_ADC_REG_IsConversionOngoing>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 839e 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d824      	bhi.n	8001dee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	3b02      	subs	r3, #2
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d81b      	bhi.n	8001de6 <HAL_ADC_ConfigChannel+0x86>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <HAL_ADC_ConfigChannel+0x54>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001dc5 	.word	0x08001dc5
 8001db8:	08001dcd 	.word	0x08001dcd
 8001dbc:	08001dd5 	.word	0x08001dd5
 8001dc0:	08001ddd 	.word	0x08001ddd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	605a      	str	r2, [r3, #4]
          break;
 8001dca:	e011      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2212      	movs	r2, #18
 8001dd0:	605a      	str	r2, [r3, #4]
          break;
 8001dd2:	e00d      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2218      	movs	r2, #24
 8001dd8:	605a      	str	r2, [r3, #4]
          break;
 8001dda:	e009      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de2:	605a      	str	r2, [r3, #4]
          break;
 8001de4:	e004      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2206      	movs	r2, #6
 8001dea:	605a      	str	r2, [r3, #4]
          break;
 8001dec:	e000      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001dee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f7ff fc99 	bl	8001734 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fd99 	bl	800193e <LL_ADC_REG_IsConversionOngoing>
 8001e0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fda5 	bl	8001964 <LL_ADC_INJ_IsConversionOngoing>
 8001e1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 81a6 	bne.w	8002174 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 81a1 	bne.w	8002174 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f7ff fca4 	bl	800178c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d00a      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e76:	f7ff fbf5 	bl	8001664 <LL_ADC_SetOffset>
 8001e7a:	e17b      	b.n	8002174 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fc12 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x148>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fc07 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	e01e      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x186>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fbfc 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e004      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001eda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x19e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	e018      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1d0>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f22:	2320      	movs	r3, #32
 8001f24:	e004      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d106      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fbcb 	bl	80016d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fbaf 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x20e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fba4 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	e01e      	b.n	8001fac <HAL_ADC_ConfigChannel+0x24c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fb99 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	e004      	b.n	8001faa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x264>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	e018      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x296>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e004      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d106      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fb68 	bl	80016d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb4c 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10a      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x2d4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2102      	movs	r1, #2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fb41 	bl	80016ac <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	f003 021f 	and.w	r2, r3, #31
 8002032:	e01e      	b.n	8002072 <HAL_ADC_ConfigChannel+0x312>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fb36 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800205a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002062:	2320      	movs	r3, #32
 8002064:	e004      	b.n	8002070 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002066:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_ConfigChannel+0x32a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	e016      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x358>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800209c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800209e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80020aa:	2320      	movs	r3, #32
 80020ac:	e004      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2102      	movs	r1, #2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fb07 	bl	80016d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2103      	movs	r1, #3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff faeb 	bl	80016ac <LL_ADC_GetOffsetChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x396>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2103      	movs	r1, #3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fae0 	bl	80016ac <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	0e9b      	lsrs	r3, r3, #26
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	e017      	b.n	8002126 <HAL_ADC_ConfigChannel+0x3c6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2103      	movs	r1, #3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fad5 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800210e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002110:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800211c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_ADC_ConfigChannel+0x3de>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	e011      	b.n	8002162 <HAL_ADC_ConfigChannel+0x402>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800214c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800214e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002156:	2320      	movs	r3, #32
 8002158:	e003      	b.n	8002162 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800215a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002162:	429a      	cmp	r2, r3
 8002164:	d106      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	2103      	movs	r1, #3
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fab2 	bl	80016d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fbb9 	bl	80018f0 <LL_ADC_IsEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 813f 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff fb26 	bl	80017e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a8e      	ldr	r2, [pc, #568]	; (80023d8 <HAL_ADC_ConfigChannel+0x678>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	f040 8130 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x46c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	3301      	adds	r3, #1
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	bf94      	ite	ls
 80021c4:	2301      	movls	r3, #1
 80021c6:	2300      	movhi	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e019      	b.n	8002200 <HAL_ADC_ConfigChannel+0x4a0>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021e4:	2320      	movs	r3, #32
 80021e6:	e003      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	bf94      	ite	ls
 80021fa:	2301      	movls	r3, #1
 80021fc:	2300      	movhi	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002200:	2b00      	cmp	r3, #0
 8002202:	d079      	beq.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220c:	2b00      	cmp	r3, #0
 800220e:	d107      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x4c0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0e9b      	lsrs	r3, r3, #26
 8002216:	3301      	adds	r3, #1
 8002218:	069b      	lsls	r3, r3, #26
 800221a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221e:	e015      	b.n	800224c <HAL_ADC_ConfigChannel+0x4ec>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800222e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002230:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	069b      	lsls	r3, r3, #26
 8002248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_ADC_ConfigChannel+0x50c>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	3301      	adds	r3, #1
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	e017      	b.n	800229c <HAL_ADC_ConfigChannel+0x53c>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800227a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e003      	b.n	8002290 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	ea42 0103 	orr.w	r1, r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x562>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	051b      	lsls	r3, r3, #20
 80022c0:	e018      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x594>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e003      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f4:	430b      	orrs	r3, r1
 80022f6:	e080      	b.n	80023fa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x5b4>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	069b      	lsls	r3, r3, #26
 800230e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002312:	e015      	b.n	8002340 <HAL_ADC_ConfigChannel+0x5e0>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e003      	b.n	8002338 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	069b      	lsls	r3, r3, #26
 800233c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x600>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	e017      	b.n	8002390 <HAL_ADC_ConfigChannel+0x630>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	61fb      	str	r3, [r7, #28]
  return result;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	ea42 0103 	orr.w	r1, r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x65c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	3b1e      	subs	r3, #30
 80023b4:	051b      	lsls	r3, r3, #20
 80023b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ba:	e01d      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x698>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	613b      	str	r3, [r7, #16]
  return result;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e005      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x684>
 80023d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f003 021f 	and.w	r2, r3, #31
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	3b1e      	subs	r3, #30
 80023f2:	051b      	lsls	r3, r3, #20
 80023f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	430b      	orrs	r3, r1
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	6892      	ldr	r2, [r2, #8]
 80023fe:	4619      	mov	r1, r3
 8002400:	f7ff f9c4 	bl	800178c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_ADC_ConfigChannel+0x7a0>)
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d06c      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002410:	483c      	ldr	r0, [pc, #240]	; (8002504 <HAL_ADC_ConfigChannel+0x7a4>)
 8002412:	f7ff f919 	bl	8001648 <LL_ADC_GetCommonPathInternalCh>
 8002416:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3a      	ldr	r2, [pc, #232]	; (8002508 <HAL_ADC_ConfigChannel+0x7a8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d127      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d121      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a35      	ldr	r2, [pc, #212]	; (800250c <HAL_ADC_ConfigChannel+0x7ac>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d157      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800243a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800243e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002442:	4619      	mov	r1, r3
 8002444:	482f      	ldr	r0, [pc, #188]	; (8002504 <HAL_ADC_ConfigChannel+0x7a4>)
 8002446:	f7ff f8ec 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_ADC_ConfigChannel+0x7b0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	4a30      	ldr	r2, [pc, #192]	; (8002514 <HAL_ADC_ConfigChannel+0x7b4>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002464:	e002      	b.n	800246c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002472:	e03a      	b.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_ADC_ConfigChannel+0x7b8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d113      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x746>
 800247e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_ADC_ConfigChannel+0x7ac>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d12a      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249c:	4619      	mov	r1, r3
 800249e:	4819      	ldr	r0, [pc, #100]	; (8002504 <HAL_ADC_ConfigChannel+0x7a4>)
 80024a0:	f7ff f8bf 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a4:	e021      	b.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_ADC_ConfigChannel+0x7bc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d11c      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_ADC_ConfigChannel+0x7ac>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ce:	4619      	mov	r1, r3
 80024d0:	480c      	ldr	r0, [pc, #48]	; (8002504 <HAL_ADC_ConfigChannel+0x7a4>)
 80024d2:	f7ff f8a6 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
 80024d6:	e008      	b.n	80024ea <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	37d8      	adds	r7, #216	; 0xd8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	80080000 	.word	0x80080000
 8002504:	50040300 	.word	0x50040300
 8002508:	c7520000 	.word	0xc7520000
 800250c:	50040000 	.word	0x50040000
 8002510:	20000018 	.word	0x20000018
 8002514:	053e2d63 	.word	0x053e2d63
 8002518:	cb840000 	.word	0xcb840000
 800251c:	80000001 	.word	0x80000001

08002520 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f9dd 	bl	80018f0 <LL_ADC_IsEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d169      	bne.n	8002610 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	4b36      	ldr	r3, [pc, #216]	; (800261c <ADC_Enable+0xfc>)
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e055      	b.n	8002612 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f9ac 	bl	80018c8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002570:	482b      	ldr	r0, [pc, #172]	; (8002620 <ADC_Enable+0x100>)
 8002572:	f7ff f869 	bl	8001648 <LL_ADC_GetCommonPathInternalCh>
 8002576:	4603      	mov	r3, r0
 8002578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <ADC_Enable+0x104>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	4a28      	ldr	r2, [pc, #160]	; (8002628 <ADC_Enable+0x108>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800259a:	e002      	b.n	80025a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	3b01      	subs	r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f9      	bne.n	800259c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fff8 	bl	800159c <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ae:	e028      	b.n	8002602 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff f99b 	bl	80018f0 <LL_ADC_IsEnabled>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f97f 	bl	80018c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ca:	f7fe ffe7 	bl	800159c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d914      	bls.n	8002602 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d00d      	beq.n	8002602 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e007      	b.n	8002612 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d1cf      	bne.n	80025b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	8000003f 	.word	0x8000003f
 8002620:	50040300 	.word	0x50040300
 8002624:	20000018 	.word	0x20000018
 8002628:	053e2d63 	.word	0x053e2d63

0800262c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002642:	2b00      	cmp	r3, #0
 8002644:	d14b      	bne.n	80026de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d021      	beq.n	80026a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f852 	bl	800170e <LL_ADC_REG_IsTriggerSourceSWStart>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d032      	beq.n	80026d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d12b      	bne.n	80026d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d11f      	bne.n	80026d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
 80026a2:	e018      	b.n	80026d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d111      	bne.n	80026d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff fb24 	bl	8001d24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026dc:	e00e      	b.n	80026fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff fb2e 	bl	8001d4c <HAL_ADC_ErrorCallback>
}
 80026f0:	e004      	b.n	80026fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff fb10 	bl	8001d38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fb00 	bl	8001d4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800277c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	; (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <__NVIC_GetPriorityGrouping+0x18>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0307 	and.w	r3, r3, #7
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db0b      	blt.n	80027e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <__NVIC_EnableIRQ+0x38>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2001      	movs	r0, #1
 80027da:	fa00 f202 	lsl.w	r2, r0, r2
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000e100 	.word	0xe000e100

080027f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	2b00      	cmp	r3, #0
 8002806:	db0a      	blt.n	800281e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	490c      	ldr	r1, [pc, #48]	; (8002840 <__NVIC_SetPriority+0x4c>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	440b      	add	r3, r1
 8002818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800281c:	e00a      	b.n	8002834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4908      	ldr	r1, [pc, #32]	; (8002844 <__NVIC_SetPriority+0x50>)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3b04      	subs	r3, #4
 800282c:	0112      	lsls	r2, r2, #4
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	440b      	add	r3, r1
 8002832:	761a      	strb	r2, [r3, #24]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000e100 	.word	0xe000e100
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f1c3 0307 	rsb	r3, r3, #7
 8002862:	2b04      	cmp	r3, #4
 8002864:	bf28      	it	cs
 8002866:	2304      	movcs	r3, #4
 8002868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3304      	adds	r3, #4
 800286e:	2b06      	cmp	r3, #6
 8002870:	d902      	bls.n	8002878 <NVIC_EncodePriority+0x30>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3b03      	subs	r3, #3
 8002876:	e000      	b.n	800287a <NVIC_EncodePriority+0x32>
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	401a      	ands	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43d9      	mvns	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	4313      	orrs	r3, r2
         );
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c0:	d301      	bcc.n	80028c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00f      	b.n	80028e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <SysTick_Config+0x40>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ce:	210f      	movs	r1, #15
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f7ff ff8e 	bl	80027f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <SysTick_Config+0x40>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <SysTick_Config+0x40>)
 80028e0:	2207      	movs	r2, #7
 80028e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	e000e010 	.word	0xe000e010

080028f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff29 	bl	8002754 <__NVIC_SetPriorityGrouping>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800291c:	f7ff ff3e 	bl	800279c <__NVIC_GetPriorityGrouping>
 8002920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	6978      	ldr	r0, [r7, #20]
 8002928:	f7ff ff8e 	bl	8002848 <NVIC_EncodePriority>
 800292c:	4602      	mov	r2, r0
 800292e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff5d 	bl	80027f4 <__NVIC_SetPriority>
}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff31 	bl	80027b8 <__NVIC_EnableIRQ>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ffa2 	bl	80028b0 <SysTick_Config>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e014      	b.n	80029b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	791b      	ldrb	r3, [r3, #4]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7fe fb81 	bl	80010a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	795b      	ldrb	r3, [r3, #5]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_DAC_Start+0x16>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e03b      	b.n	8002a48 <HAL_DAC_Start+0x8e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2201      	movs	r2, #1
 80029ea:	409a      	lsls	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d118      	bne.n	8002a3a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	e00f      	b.n	8002a3a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a28:	d107      	bne.n	8002a3a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0202 	orr.w	r2, r2, #2
 8002a38:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3308      	adds	r3, #8
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e004      	b.n	8002a88 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3314      	adds	r3, #20
 8002a86:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b088      	sub	sp, #32
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	795b      	ldrb	r3, [r3, #5]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_DAC_ConfigChannel+0x1c>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e107      	b.n	8002cca <HAL_DAC_ConfigChannel+0x22c>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d174      	bne.n	8002bb8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fd65 	bl	800159c <HAL_GetTick>
 8002ad2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d134      	bne.n	8002b44 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ada:	e011      	b.n	8002b00 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002adc:	f7fe fd5e 	bl	800159c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d90a      	bls.n	8002b00 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f043 0208 	orr.w	r2, r3, #8
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2203      	movs	r2, #3
 8002afa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0e4      	b.n	8002cca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e6      	bne.n	8002adc <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7fe fd50 	bl	80015b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	6992      	ldr	r2, [r2, #24]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b1e:	e01e      	b.n	8002b5e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b20:	f7fe fd3c 	bl	800159c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d90a      	bls.n	8002b44 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f043 0208 	orr.w	r2, r3, #8
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0c2      	b.n	8002cca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	dbe8      	blt.n	8002b20 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7fe fd30 	bl	80015b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	6992      	ldr	r2, [r2, #24]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	ea02 0103 	and.w	r1, r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	21ff      	movs	r1, #255	; 0xff
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	ea02 0103 	and.w	r1, r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d11d      	bne.n	8002bfc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	221f      	movs	r2, #31
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	400a      	ands	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	22c0      	movs	r2, #192	; 0xc0
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	400a      	ands	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e098      	b.n	8002e18 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_DMA_Init+0x150>)
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d80f      	bhi.n	8002d12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <HAL_DMA_Init+0x154>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a4b      	ldr	r2, [pc, #300]	; (8002e2c <HAL_DMA_Init+0x158>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	009a      	lsls	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a48      	ldr	r2, [pc, #288]	; (8002e30 <HAL_DMA_Init+0x15c>)
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d10:	e00e      	b.n	8002d30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_DMA_Init+0x160>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a43      	ldr	r2, [pc, #268]	; (8002e2c <HAL_DMA_Init+0x158>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	009a      	lsls	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_DMA_Init+0x164>)
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d8a:	d039      	beq.n	8002e00 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <HAL_DMA_Init+0x15c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d11a      	bne.n	8002dcc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_DMA_Init+0x168>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f003 031c 	and.w	r3, r3, #28
 8002da2:	210f      	movs	r1, #15
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4924      	ldr	r1, [pc, #144]	; (8002e3c <HAL_DMA_Init+0x168>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <HAL_DMA_Init+0x168>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	f003 031c 	and.w	r3, r3, #28
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	491d      	ldr	r1, [pc, #116]	; (8002e3c <HAL_DMA_Init+0x168>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
 8002dca:	e019      	b.n	8002e00 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_DMA_Init+0x16c>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f003 031c 	and.w	r3, r3, #28
 8002dd8:	210f      	movs	r1, #15
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	4917      	ldr	r1, [pc, #92]	; (8002e40 <HAL_DMA_Init+0x16c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_DMA_Init+0x16c>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f003 031c 	and.w	r3, r3, #28
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	4911      	ldr	r1, [pc, #68]	; (8002e40 <HAL_DMA_Init+0x16c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40020407 	.word	0x40020407
 8002e28:	bffdfff8 	.word	0xbffdfff8
 8002e2c:	cccccccd 	.word	0xcccccccd
 8002e30:	40020000 	.word	0x40020000
 8002e34:	bffdfbf8 	.word	0xbffdfbf8
 8002e38:	40020400 	.word	0x40020400
 8002e3c:	400200a8 	.word	0x400200a8
 8002e40:	400204a8 	.word	0x400204a8

08002e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_DMA_Start_IT+0x20>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e04b      	b.n	8002efc <HAL_DMA_Start_IT+0xb8>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d13a      	bne.n	8002eee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f95f 	bl	8003160 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 020e 	orr.w	r2, r2, #14
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e00f      	b.n	8002edc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 020a 	orr.w	r2, r2, #10
 8002eda:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e005      	b.n	8002efa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e022      	b.n	8002f74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020e 	bic.w	r2, r2, #14
 8002f3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f003 021c 	and.w	r2, r3, #28
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d005      	beq.n	8002fa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e029      	b.n	8002ff8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020e 	bic.w	r2, r2, #14
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	f003 021c 	and.w	r2, r3, #28
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
    }
  }
  return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 031c 	and.w	r3, r3, #28
 8003022:	2204      	movs	r2, #4
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d026      	beq.n	800307c <HAL_DMA_IRQHandler+0x7a>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d021      	beq.n	800307c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f003 021c 	and.w	r2, r3, #28
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2104      	movs	r1, #4
 8003064:	fa01 f202 	lsl.w	r2, r1, r2
 8003068:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	2b00      	cmp	r3, #0
 8003070:	d071      	beq.n	8003156 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800307a:	e06c      	b.n	8003156 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f003 031c 	and.w	r3, r3, #28
 8003084:	2202      	movs	r2, #2
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02e      	beq.n	80030ee <HAL_DMA_IRQHandler+0xec>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d029      	beq.n	80030ee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020a 	bic.w	r2, r2, #10
 80030b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f003 021c 	and.w	r2, r3, #28
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	2102      	movs	r1, #2
 80030ce:	fa01 f202 	lsl.w	r2, r1, r2
 80030d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d038      	beq.n	8003156 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030ec:	e033      	b.n	8003156 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f003 031c 	and.w	r3, r3, #28
 80030f6:	2208      	movs	r2, #8
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d02a      	beq.n	8003158 <HAL_DMA_IRQHandler+0x156>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d025      	beq.n	8003158 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 020e 	bic.w	r2, r2, #14
 800311a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f003 021c 	and.w	r2, r3, #28
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2101      	movs	r1, #1
 800312a:	fa01 f202 	lsl.w	r2, r1, r2
 800312e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003156:	bf00      	nop
 8003158:	bf00      	nop
}
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f003 021c 	and.w	r2, r3, #28
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b10      	cmp	r3, #16
 8003190:	d108      	bne.n	80031a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031a2:	e007      	b.n	80031b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ce:	e154      	b.n	800347a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8146 	beq.w	8003474 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d005      	beq.n	8003200 <HAL_GPIO_Init+0x40>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d130      	bne.n	8003262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003236:	2201      	movs	r2, #1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0201 	and.w	r2, r3, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b03      	cmp	r3, #3
 800326c:	d017      	beq.n	800329e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d123      	bne.n	80032f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	08da      	lsrs	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3208      	adds	r2, #8
 80032b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	08da      	lsrs	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3208      	adds	r2, #8
 80032ec:	6939      	ldr	r1, [r7, #16]
 80032ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0203 	and.w	r2, r3, #3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80a0 	beq.w	8003474 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_GPIO_Init+0x2d8>)
 8003336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003338:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_GPIO_Init+0x2d8>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6613      	str	r3, [r2, #96]	; 0x60
 8003340:	4b55      	ldr	r3, [pc, #340]	; (8003498 <HAL_GPIO_Init+0x2d8>)
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800334c:	4a53      	ldr	r2, [pc, #332]	; (800349c <HAL_GPIO_Init+0x2dc>)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	220f      	movs	r2, #15
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003376:	d019      	beq.n	80033ac <HAL_GPIO_Init+0x1ec>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a49      	ldr	r2, [pc, #292]	; (80034a0 <HAL_GPIO_Init+0x2e0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_GPIO_Init+0x1e8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a48      	ldr	r2, [pc, #288]	; (80034a4 <HAL_GPIO_Init+0x2e4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00d      	beq.n	80033a4 <HAL_GPIO_Init+0x1e4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a47      	ldr	r2, [pc, #284]	; (80034a8 <HAL_GPIO_Init+0x2e8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <HAL_GPIO_Init+0x1e0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a46      	ldr	r2, [pc, #280]	; (80034ac <HAL_GPIO_Init+0x2ec>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_GPIO_Init+0x1dc>
 8003398:	2304      	movs	r3, #4
 800339a:	e008      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 800339c:	2307      	movs	r3, #7
 800339e:	e006      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a0:	2303      	movs	r3, #3
 80033a2:	e004      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e002      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033ac:	2300      	movs	r3, #0
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	f002 0203 	and.w	r2, r2, #3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4093      	lsls	r3, r2
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033be:	4937      	ldr	r1, [pc, #220]	; (800349c <HAL_GPIO_Init+0x2dc>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033cc:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033f6:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800341a:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f aea3 	bne.w	80031d0 <HAL_GPIO_Init+0x10>
  }
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	48000400 	.word	0x48000400
 80034a4:	48000800 	.word	0x48000800
 80034a8:	48000c00 	.word	0x48000c00
 80034ac:	48001000 	.word	0x48001000
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	807b      	strh	r3, [r7, #2]
 80034c0:	4613      	mov	r3, r2
 80034c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c4:	787b      	ldrb	r3, [r7, #1]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d0:	e002      	b.n	80034d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43d9      	mvns	r1, r3
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	400b      	ands	r3, r1
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_PWREx_GetVoltageRange+0x18>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40007000 	.word	0x40007000

08003534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d130      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d038      	beq.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2232      	movs	r2, #50	; 0x32
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0c9b      	lsrs	r3, r3, #18
 8003574:	3301      	adds	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003578:	e002      	b.n	8003580 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3b01      	subs	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358c:	d102      	bne.n	8003594 <HAL_PWREx_ControlVoltageScaling+0x60>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f2      	bne.n	800357a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a0:	d110      	bne.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e00f      	b.n	80035c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d007      	beq.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035bc:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40007000 	.word	0x40007000
 80035d8:	20000018 	.word	0x20000018
 80035dc:	431bde83 	.word	0x431bde83

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e3fe      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f2:	4ba1      	ldr	r3, [pc, #644]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035fc:	4b9e      	ldr	r3, [pc, #632]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80e4 	beq.w	80037dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <HAL_RCC_OscConfig+0x4a>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	f040 808b 	bne.w	8003738 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 8087 	bne.w	8003738 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800362a:	4b93      	ldr	r3, [pc, #588]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCC_OscConfig+0x62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e3d6      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	4b8c      	ldr	r3, [pc, #560]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_RCC_OscConfig+0x7c>
 8003652:	4b89      	ldr	r3, [pc, #548]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365a:	e005      	b.n	8003668 <HAL_RCC_OscConfig+0x88>
 800365c:	4b86      	ldr	r3, [pc, #536]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	4293      	cmp	r3, r2
 800366a:	d223      	bcs.n	80036b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd8b 	bl	800418c <RCC_SetFlashLatencyFromMSIRange>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e3b7      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003680:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003686:	f043 0308 	orr.w	r3, r3, #8
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b7a      	ldr	r3, [pc, #488]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4977      	ldr	r1, [pc, #476]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800369e:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	4972      	ldr	r1, [pc, #456]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
 80036b2:	e025      	b.n	8003700 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b4:	4b70      	ldr	r3, [pc, #448]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6f      	ldr	r2, [pc, #444]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b6d      	ldr	r3, [pc, #436]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	496a      	ldr	r1, [pc, #424]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d2:	4b69      	ldr	r3, [pc, #420]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	4965      	ldr	r1, [pc, #404]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fd4b 	bl	800418c <RCC_SetFlashLatencyFromMSIRange>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e377      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003700:	f000 fc80 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	495a      	ldr	r1, [pc, #360]	; (800387c <HAL_RCC_OscConfig+0x29c>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
 800371c:	4a58      	ldr	r2, [pc, #352]	; (8003880 <HAL_RCC_OscConfig+0x2a0>)
 800371e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003720:	4b58      	ldr	r3, [pc, #352]	; (8003884 <HAL_RCC_OscConfig+0x2a4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fee9 	bl	80014fc <HAL_InitTick>
 800372a:	4603      	mov	r3, r0
 800372c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d052      	beq.n	80037da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	e35b      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d032      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003740:	4b4d      	ldr	r3, [pc, #308]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a4c      	ldr	r2, [pc, #304]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800374c:	f7fd ff26 	bl	800159c <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003754:	f7fd ff22 	bl	800159c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e344      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003766:	4b44      	ldr	r3, [pc, #272]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	493b      	ldr	r1, [pc, #236]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	4936      	ldr	r1, [pc, #216]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
 80037a4:	e01a      	b.n	80037dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037a6:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a33      	ldr	r2, [pc, #204]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037b2:	f7fd fef3 	bl	800159c <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ba:	f7fd feef 	bl	800159c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e311      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x1da>
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d074      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x21a>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	d10e      	bne.n	8003812 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d10b      	bne.n	8003812 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d064      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d160      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e2ee      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x24a>
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e01d      	b.n	8003866 <HAL_RCC_OscConfig+0x286>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003832:	d10c      	bne.n	800384e <HAL_RCC_OscConfig+0x26e>
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800383a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e00b      	b.n	8003866 <HAL_RCC_OscConfig+0x286>
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a06      	ldr	r2, [pc, #24]	; (8003878 <HAL_RCC_OscConfig+0x298>)
 8003860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003864:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fd fe95 	bl	800159c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003874:	e011      	b.n	800389a <HAL_RCC_OscConfig+0x2ba>
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	08008c14 	.word	0x08008c14
 8003880:	20000018 	.word	0x20000018
 8003884:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fd fe88 	bl	800159c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e2aa      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800389a:	4baf      	ldr	r3, [pc, #700]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x2a8>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fe78 	bl	800159c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fd fe74 	bl	800159c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e296      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038c2:	4ba5      	ldr	r3, [pc, #660]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x2d0>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d060      	beq.n	80039a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x310>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d119      	bne.n	800391e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d116      	bne.n	800391e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f0:	4b99      	ldr	r3, [pc, #612]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x328>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e273      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b93      	ldr	r3, [pc, #588]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	4990      	ldr	r1, [pc, #576]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800391c:	e040      	b.n	80039a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d023      	beq.n	800396e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003926:	4b8c      	ldr	r3, [pc, #560]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a8b      	ldr	r2, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fe33 	bl	800159c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fd fe2f 	bl	800159c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e251      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800394c:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	497c      	ldr	r1, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
 800396c:	e018      	b.n	80039a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396e:	4b7a      	ldr	r3, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a79      	ldr	r2, [pc, #484]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fd fe0f 	bl	800159c <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003982:	f7fd fe0b 	bl	800159c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e22d      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003994:	4b70      	ldr	r3, [pc, #448]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f0      	bne.n	8003982 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d03c      	beq.n	8003a26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01c      	beq.n	80039ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ba:	4a67      	ldr	r2, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fd fdea 	bl	800159c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039cc:	f7fd fde6 	bl	800159c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e208      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039de:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 80039e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ef      	beq.n	80039cc <HAL_RCC_OscConfig+0x3ec>
 80039ec:	e01b      	b.n	8003a26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ee:	4b5a      	ldr	r3, [pc, #360]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 80039f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fe:	f7fd fdcd 	bl	800159c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fd fdc9 	bl	800159c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e1eb      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a18:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ef      	bne.n	8003a06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80a6 	beq.w	8003b80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a34:	2300      	movs	r3, #0
 8003a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a38:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a44:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	4a43      	ldr	r2, [pc, #268]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a60:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <HAL_RCC_OscConfig+0x57c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d118      	bne.n	8003a9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCC_OscConfig+0x57c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <HAL_RCC_OscConfig+0x57c>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a78:	f7fd fd90 	bl	800159c <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a80:	f7fd fd8c 	bl	800159c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1ae      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <HAL_RCC_OscConfig+0x57c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d108      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4d8>
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab6:	e024      	b.n	8003b02 <HAL_RCC_OscConfig+0x522>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d110      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x502>
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae0:	e00f      	b.n	8003b02 <HAL_RCC_OscConfig+0x522>
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af2:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003afa:	f023 0304 	bic.w	r3, r3, #4
 8003afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fd fd47 	bl	800159c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fd fd43 	bl	800159c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e163      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x578>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ed      	beq.n	8003b12 <HAL_RCC_OscConfig+0x532>
 8003b36:	e01a      	b.n	8003b6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fd30 	bl	800159c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd fd2c 	bl	800159c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d906      	bls.n	8003b60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e14c      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b60:	4ba5      	ldr	r3, [pc, #660]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e8      	bne.n	8003b40 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b6e:	7ffb      	ldrb	r3, [r7, #31]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4ba0      	ldr	r3, [pc, #640]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	4a9f      	ldr	r2, [pc, #636]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d03c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01c      	beq.n	8003bce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b94:	4b98      	ldr	r3, [pc, #608]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9a:	4a97      	ldr	r2, [pc, #604]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fcfa 	bl	800159c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bac:	f7fd fcf6 	bl	800159c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e118      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bbe:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ef      	beq.n	8003bac <HAL_RCC_OscConfig+0x5cc>
 8003bcc:	e01b      	b.n	8003c06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bce:	4b8a      	ldr	r3, [pc, #552]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	4a88      	ldr	r2, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fcdd 	bl	800159c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be6:	f7fd fcd9 	bl	800159c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0fb      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf8:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1ef      	bne.n	8003be6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80ef 	beq.w	8003dee <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	f040 80c5 	bne.w	8003da4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c1a:	4b77      	ldr	r3, [pc, #476]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0203 	and.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d12c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d123      	bne.n	8003c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d11b      	bne.n	8003c88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d113      	bne.n	8003c88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d109      	bne.n	8003c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	3b01      	subs	r3, #1
 8003c82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d067      	beq.n	8003d58 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d062      	beq.n	8003d54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c8e:	4b5a      	ldr	r3, [pc, #360]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0a8      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003caa:	f7fd fc77 	bl	800159c <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd fc73 	bl	800159c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e095      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc4:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	4b49      	ldr	r3, [pc, #292]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <HAL_RCC_OscConfig+0x81c>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cea:	0212      	lsls	r2, r2, #8
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cf2:	0852      	lsrs	r2, r2, #1
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0552      	lsls	r2, r2, #21
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cfe:	0852      	lsrs	r2, r2, #1
 8003d00:	3a01      	subs	r2, #1
 8003d02:	0652      	lsls	r2, r2, #25
 8003d04:	4311      	orrs	r1, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d0a:	06d2      	lsls	r2, r2, #27
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	493a      	ldr	r1, [pc, #232]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d14:	4b38      	ldr	r3, [pc, #224]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a37      	ldr	r2, [pc, #220]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d20:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d2c:	f7fd fc36 	bl	800159c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd fc32 	bl	800159c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e054      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d52:	e04c      	b.n	8003dee <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e04b      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d144      	bne.n	8003dee <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d7c:	f7fd fc0e 	bl	800159c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fc0a 	bl	800159c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e02c      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x7a4>
 8003da2:	e024      	b.n	8003dee <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d01f      	beq.n	8003dea <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd fbf1 	bl	800159c <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fd fbed 	bl	800159c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e00f      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	4905      	ldr	r1, [pc, #20]	; (8003df8 <HAL_RCC_OscConfig+0x818>)
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_RCC_OscConfig+0x820>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	60cb      	str	r3, [r1, #12]
 8003de8:	e001      	b.n	8003dee <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	019d808c 	.word	0x019d808c
 8003e00:	feeefffc 	.word	0xfeeefffc

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0e7      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b75      	ldr	r3, [pc, #468]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d910      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b72      	ldr	r3, [pc, #456]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4970      	ldr	r1, [pc, #448]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b6e      	ldr	r3, [pc, #440]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0cf      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b66      	ldr	r3, [pc, #408]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d908      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e64:	4b63      	ldr	r3, [pc, #396]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4960      	ldr	r1, [pc, #384]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04c      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8a:	4b5a      	ldr	r3, [pc, #360]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d121      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0a6      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea2:	4b54      	ldr	r3, [pc, #336]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d115      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e09a      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e08e      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eca:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e086      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4943      	ldr	r1, [pc, #268]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fd fb56 	bl	800159c <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7fd fb52 	bl	800159c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e06e      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 020c 	and.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1eb      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d010      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d208      	bcs.n	8003f4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	492b      	ldr	r1, [pc, #172]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4a:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d210      	bcs.n	8003f7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 0207 	bic.w	r2, r3, #7
 8003f60:	4923      	ldr	r1, [pc, #140]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e036      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4918      	ldr	r1, [pc, #96]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4910      	ldr	r1, [pc, #64]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb8:	f000 f824 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	490b      	ldr	r1, [pc, #44]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd4:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003fd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1fc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd fa8d 	bl	80014fc <HAL_InitTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08008c14 	.word	0x08008c14
 8003ffc:	20000018 	.word	0x20000018
 8004000:	2000001c 	.word	0x2000001c

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004012:	4b3e      	ldr	r3, [pc, #248]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800401c:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x34>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d121      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d11e      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004038:	4b34      	ldr	r3, [pc, #208]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e005      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004054:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004074:	e00a      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d102      	bne.n	8004082 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_RCC_GetSysClockFreq+0x110>)
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	e004      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d101      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_RCC_GetSysClockFreq+0x114>)
 800408a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d134      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004092:	4b1e      	ldr	r3, [pc, #120]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0xa6>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d003      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0xac>
 80040a8:	e005      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_GetSysClockFreq+0x110>)
 80040ac:	617b      	str	r3, [r7, #20]
      break;
 80040ae:	e005      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_RCC_GetSysClockFreq+0x114>)
 80040b2:	617b      	str	r3, [r7, #20]
      break;
 80040b4:	e002      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	617b      	str	r3, [r7, #20]
      break;
 80040ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040bc:	4b13      	ldr	r3, [pc, #76]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	3301      	adds	r3, #1
 80040c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	fb02 f203 	mul.w	r2, r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_RCC_GetSysClockFreq+0x108>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	0e5b      	lsrs	r3, r3, #25
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	3301      	adds	r3, #1
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040fc:	69bb      	ldr	r3, [r7, #24]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	; 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	08008c2c 	.word	0x08008c2c
 8004114:	00f42400 	.word	0x00f42400
 8004118:	007a1200 	.word	0x007a1200

0800411c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_RCC_GetHCLKFreq+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000018 	.word	0x20000018

08004134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004138:	f7ff fff0 	bl	800411c <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	; (800415c <HAL_RCC_GetPCLK1Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08008c24 	.word	0x08008c24

08004160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004164:	f7ff ffda 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0adb      	lsrs	r3, r3, #11
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4904      	ldr	r1, [pc, #16]	; (8004188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	08008c24 	.word	0x08008c24

0800418c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041a4:	f7ff f9b8 	bl	8003518 <HAL_PWREx_GetVoltageRange>
 80041a8:	6178      	str	r0, [r7, #20]
 80041aa:	e014      	b.n	80041d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	4a24      	ldr	r2, [pc, #144]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6593      	str	r3, [r2, #88]	; 0x58
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041c4:	f7ff f9a8 	bl	8003518 <HAL_PWREx_GetVoltageRange>
 80041c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d10b      	bne.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d919      	bls.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2ba0      	cmp	r3, #160	; 0xa0
 80041e8:	d902      	bls.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ea:	2302      	movs	r3, #2
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e013      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f0:	2301      	movs	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e010      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d902      	bls.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041fc:	2303      	movs	r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e00a      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d102      	bne.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004208:	2302      	movs	r3, #2
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	e004      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b70      	cmp	r3, #112	; 0x70
 8004212:	d101      	bne.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004214:	2301      	movs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 0207 	bic.w	r2, r3, #7
 8004220:	4909      	ldr	r1, [pc, #36]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	40022000 	.word	0x40022000

0800424c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004254:	2300      	movs	r3, #0
 8004256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004258:	2300      	movs	r3, #0
 800425a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004264:	2b00      	cmp	r3, #0
 8004266:	d031      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004270:	d01a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004276:	d814      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800427c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004280:	d10f      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004282:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4a5c      	ldr	r2, [pc, #368]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800428e:	e00c      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f9f0 	bl	800467c <RCCEx_PLLSAI1_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a0:	e003      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	74fb      	strb	r3, [r7, #19]
      break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80042a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b0:	4b51      	ldr	r3, [pc, #324]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	494e      	ldr	r1, [pc, #312]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042c6:	e001      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 809e 	beq.w	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042de:	4b46      	ldr	r3, [pc, #280]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004300:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430c:	2301      	movs	r3, #1
 800430e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004310:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a39      	ldr	r2, [pc, #228]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800431c:	f7fd f93e 	bl	800159c <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004322:	e009      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004324:	f7fd f93a 	bl	800159c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d902      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	74fb      	strb	r3, [r7, #19]
        break;
 8004336:	e005      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004338:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ef      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d15a      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800434a:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01e      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	429a      	cmp	r2, r3
 8004364:	d019      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004366:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004370:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004372:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800437a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004392:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d016      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd f8fa 	bl	800159c <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043aa:	e00b      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fd f8f6 	bl	800159c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d902      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	74fb      	strb	r3, [r7, #19]
            break;
 80043c2:	e006      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0ec      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4904      	ldr	r1, [pc, #16]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043ee:	e009      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	74bb      	strb	r3, [r7, #18]
 80043f4:	e006      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004404:	7c7b      	ldrb	r3, [r7, #17]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b9b      	ldr	r3, [pc, #620]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	4a9a      	ldr	r2, [pc, #616]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004422:	4b95      	ldr	r3, [pc, #596]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 0203 	bic.w	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4991      	ldr	r1, [pc, #580]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004444:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 020c 	bic.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	4989      	ldr	r1, [pc, #548]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004466:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	4980      	ldr	r1, [pc, #512]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004488:	4b7b      	ldr	r3, [pc, #492]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	4978      	ldr	r1, [pc, #480]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044aa:	4b73      	ldr	r3, [pc, #460]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	496f      	ldr	r1, [pc, #444]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044cc:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	4967      	ldr	r1, [pc, #412]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ee:	4b62      	ldr	r3, [pc, #392]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	495e      	ldr	r1, [pc, #376]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	4956      	ldr	r1, [pc, #344]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004532:	4b51      	ldr	r3, [pc, #324]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	494d      	ldr	r1, [pc, #308]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d028      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004554:	4b48      	ldr	r3, [pc, #288]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	4945      	ldr	r1, [pc, #276]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004572:	d106      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b40      	ldr	r3, [pc, #256]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a3f      	ldr	r2, [pc, #252]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
 8004580:	e011      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458a:	d10c      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f872 	bl	800467c <RCCEx_PLLSAI1_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d028      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c0:	492d      	ldr	r1, [pc, #180]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d0:	d106      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d2:	4b29      	ldr	r3, [pc, #164]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4a28      	ldr	r2, [pc, #160]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045dc:	60d3      	str	r3, [r2, #12]
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e8:	d10c      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2101      	movs	r1, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f843 	bl	800467c <RCCEx_PLLSAI1_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01c      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	4916      	ldr	r1, [pc, #88]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462e:	d10c      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f820 	bl	800467c <RCCEx_PLLSAI1_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800466c:	7cbb      	ldrb	r3, [r7, #18]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000

0800467c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800468a:	4b74      	ldr	r3, [pc, #464]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004696:	4b71      	ldr	r3, [pc, #452]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d10d      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
       ||
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046ae:	4b6b      	ldr	r3, [pc, #428]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
       ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d047      	beq.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e044      	b.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d018      	beq.n	8004702 <RCCEx_PLLSAI1_Config+0x86>
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d825      	bhi.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <RCCEx_PLLSAI1_Config+0x62>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d009      	beq.n	80046f0 <RCCEx_PLLSAI1_Config+0x74>
 80046dc:	e020      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046de:	4b5f      	ldr	r3, [pc, #380]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11d      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ee:	e01a      	b.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f0:	4b5a      	ldr	r3, [pc, #360]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e013      	b.n	800472a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004702:	4b56      	ldr	r3, [pc, #344]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800470e:	4b53      	ldr	r3, [pc, #332]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800471e:	e006      	b.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e004      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004736:	4b49      	ldr	r3, [pc, #292]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	430b      	orrs	r3, r1
 800474c:	4943      	ldr	r1, [pc, #268]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d17c      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004758:	4b40      	ldr	r3, [pc, #256]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a3f      	ldr	r2, [pc, #252]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 800475e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fc ff1a 	bl	800159c <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800476c:	f7fc ff16 	bl	800159c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
        break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ef      	bne.n	800476c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d15f      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d110      	bne.n	80047ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004798:	4b30      	ldr	r3, [pc, #192]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80047a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6892      	ldr	r2, [r2, #8]
 80047a8:	0211      	lsls	r1, r2, #8
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	06d2      	lsls	r2, r2, #27
 80047b0:	430a      	orrs	r2, r1
 80047b2:	492a      	ldr	r1, [pc, #168]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	610b      	str	r3, [r1, #16]
 80047b8:	e027      	b.n	800480a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d112      	bne.n	80047e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c0:	4b26      	ldr	r3, [pc, #152]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6892      	ldr	r2, [r2, #8]
 80047d0:	0211      	lsls	r1, r2, #8
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6912      	ldr	r2, [r2, #16]
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	3a01      	subs	r2, #1
 80047da:	0552      	lsls	r2, r2, #21
 80047dc:	430a      	orrs	r2, r1
 80047de:	491f      	ldr	r1, [pc, #124]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	610b      	str	r3, [r1, #16]
 80047e4:	e011      	b.n	800480a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	0211      	lsls	r1, r2, #8
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6952      	ldr	r2, [r2, #20]
 80047fc:	0852      	lsrs	r2, r2, #1
 80047fe:	3a01      	subs	r2, #1
 8004800:	0652      	lsls	r2, r2, #25
 8004802:	430a      	orrs	r2, r1
 8004804:	4915      	ldr	r1, [pc, #84]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004806:	4313      	orrs	r3, r2
 8004808:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004810:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004814:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7fc fec1 	bl	800159c <HAL_GetTick>
 800481a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800481c:	e009      	b.n	8004832 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800481e:	f7fc febd 	bl	800159c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d902      	bls.n	8004832 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	73fb      	strb	r3, [r7, #15]
          break;
 8004830:	e005      	b.n	800483e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ef      	beq.n	800481e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <RCCEx_PLLSAI1_Config+0x1e0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000

08004860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e095      	b.n	800499e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004882:	d009      	beq.n	8004898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	61da      	str	r2, [r3, #28]
 800488a:	e005      	b.n	8004898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc fc32 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048d8:	d902      	bls.n	80048e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e002      	b.n	80048e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ee:	d007      	beq.n	8004900 <HAL_SPI_Init+0xa0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f8:	d002      	beq.n	8004900 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	ea42 0103 	orr.w	r1, r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	0c1b      	lsrs	r3, r3, #16
 800495c:	f003 0204 	and.w	r2, r3, #4
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800497c:	ea42 0103 	orr.w	r1, r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_SPI_Transmit+0x22>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e158      	b.n	8004c7a <HAL_SPI_Transmit+0x2d4>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d0:	f7fc fde4 	bl	800159c <HAL_GetTick>
 80049d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ea:	e13d      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_Transmit+0x52>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049fc:	e134      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2203      	movs	r2, #3
 8004a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a48:	d10f      	bne.n	8004a6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a90:	d94b      	bls.n	8004b2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_Transmit+0xfa>
 8004a9a:	8afb      	ldrh	r3, [r7, #22]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d13e      	bne.n	8004b1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	1c9a      	adds	r2, r3, #2
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ac4:	e02b      	b.n	8004b1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d112      	bne.n	8004afa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004af8:	e011      	b.n	8004b1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afa:	f7fc fd4f 	bl	800159c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d803      	bhi.n	8004b12 <HAL_SPI_Transmit+0x16c>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d102      	bne.n	8004b18 <HAL_SPI_Transmit+0x172>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b1c:	e0a4      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ce      	bne.n	8004ac6 <HAL_SPI_Transmit+0x120>
 8004b28:	e07c      	b.n	8004c24 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0x192>
 8004b32:	8afb      	ldrh	r3, [r7, #22]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d170      	bne.n	8004c1a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d912      	bls.n	8004b68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b66:	e058      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b8e:	e044      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d12b      	bne.n	8004bf6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d912      	bls.n	8004bce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bcc:	e025      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf4:	e011      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf6:	f7fc fcd1 	bl	800159c <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d803      	bhi.n	8004c0e <HAL_SPI_Transmit+0x268>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Transmit+0x26e>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c18:	e026      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1b5      	bne.n	8004b90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	6839      	ldr	r1, [r7, #0]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f949 	bl	8004ec0 <SPI_EndRxTxTransaction>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e000      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c94:	f7fc fc82 	bl	800159c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ca4:	f7fc fc7a 	bl	800159c <HAL_GetTick>
 8004ca8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	015b      	lsls	r3, r3, #5
 8004cb0:	0d1b      	lsrs	r3, r3, #20
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cba:	e054      	b.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d050      	beq.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cc4:	f7fc fc6a 	bl	800159c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d902      	bls.n	8004cda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d13d      	bne.n	8004d56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf2:	d111      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfc:	d004      	beq.n	8004d08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d107      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d20:	d10f      	bne.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e017      	b.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d19b      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000018 	.word	0x20000018

08004d94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004da6:	f7fc fbf9 	bl	800159c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	4413      	add	r3, r2
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004db6:	f7fc fbf1 	bl	800159c <HAL_GetTick>
 8004dba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004dc4:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	00da      	lsls	r2, r3, #3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	0d1b      	lsrs	r3, r3, #20
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ddc:	e060      	b.n	8004ea0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004de4:	d107      	bne.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d050      	beq.n	8004ea0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dfe:	f7fc fbcd 	bl	800159c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d902      	bls.n	8004e14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d13d      	bne.n	8004e90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2c:	d111      	bne.n	8004e52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e36:	d004      	beq.n	8004e42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e40:	d107      	bne.n	8004e52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5a:	d10f      	bne.n	8004e7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e010      	b.n	8004eb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d196      	bne.n	8004dde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3728      	adds	r7, #40	; 0x28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000018 	.word	0x20000018

08004ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff ff5b 	bl	8004d94 <SPI_WaitFifoStateUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e027      	b.n	8004f44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2200      	movs	r2, #0
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7ff fec0 	bl	8004c84 <SPI_WaitFlagStateUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e014      	b.n	8004f44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff ff34 	bl	8004d94 <SPI_WaitFifoStateUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e000      	b.n	8004f44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e049      	b.n	8004ff2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fc f934 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fa00 	bl	8005390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e03b      	b.n	800508c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a19      	ldr	r2, [pc, #100]	; (8005098 <HAL_TIM_Base_Start_IT+0x9c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <HAL_TIM_Base_Start_IT+0x4e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d004      	beq.n	800504a <HAL_TIM_Base_Start_IT+0x4e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a15      	ldr	r2, [pc, #84]	; (800509c <HAL_TIM_Base_Start_IT+0xa0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d115      	bne.n	8005076 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005052:	4013      	ands	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b06      	cmp	r3, #6
 800505a:	d015      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x8c>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005062:	d011      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	e008      	b.n	8005088 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0201 	orr.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e000      	b.n	800508a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40014000 	.word	0x40014000
 80050a0:	00010007 	.word	0x00010007

080050a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6a1a      	ldr	r2, [r3, #32]
 80050c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10f      	bne.n	80050ec <HAL_TIM_Base_Stop_IT+0x48>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	f240 4344 	movw	r3, #1092	; 0x444
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <HAL_TIM_Base_Stop_IT+0x48>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b02      	cmp	r3, #2
 8005116:	d122      	bne.n	800515e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d11b      	bne.n	800515e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0202 	mvn.w	r2, #2
 800512e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f905 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 800514a:	e005      	b.n	8005158 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f8f7 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f908 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b04      	cmp	r3, #4
 800516a:	d122      	bne.n	80051b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d11b      	bne.n	80051b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f06f 0204 	mvn.w	r2, #4
 8005182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8db 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 800519e:	e005      	b.n	80051ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8cd 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8de 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d122      	bne.n	8005206 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d11b      	bne.n	8005206 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f06f 0208 	mvn.w	r2, #8
 80051d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2204      	movs	r2, #4
 80051dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8b1 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 80051f2:	e005      	b.n	8005200 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8a3 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f8b4 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b10      	cmp	r3, #16
 8005212:	d122      	bne.n	800525a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b10      	cmp	r3, #16
 8005220:	d11b      	bne.n	800525a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f06f 0210 	mvn.w	r2, #16
 800522a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2208      	movs	r2, #8
 8005230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f887 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 8005246:	e005      	b.n	8005254 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f879 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f88a 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d10e      	bne.n	8005286 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d107      	bne.n	8005286 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f06f 0201 	mvn.w	r2, #1
 800527e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fb fde1 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d10e      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d107      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f943 	bl	8005538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d10e      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d107      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f936 	bl	800554c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d10e      	bne.n	800530c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d107      	bne.n	800530c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f838 	bl	800537c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b20      	cmp	r3, #32
 8005318:	d10e      	bne.n	8005338 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b20      	cmp	r3, #32
 8005326:	d107      	bne.n	8005338 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0220 	mvn.w	r2, #32
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8f6 	bl	8005524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a2a      	ldr	r2, [pc, #168]	; (800544c <TIM_Base_SetConfig+0xbc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x20>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ae:	d108      	bne.n	80053c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a21      	ldr	r2, [pc, #132]	; (800544c <TIM_Base_SetConfig+0xbc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00b      	beq.n	80053e2 <TIM_Base_SetConfig+0x52>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d007      	beq.n	80053e2 <TIM_Base_SetConfig+0x52>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <TIM_Base_SetConfig+0xc0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d003      	beq.n	80053e2 <TIM_Base_SetConfig+0x52>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <TIM_Base_SetConfig+0xc4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d108      	bne.n	80053f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a0c      	ldr	r2, [pc, #48]	; (800544c <TIM_Base_SetConfig+0xbc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d007      	beq.n	8005430 <TIM_Base_SetConfig+0xa0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <TIM_Base_SetConfig+0xc0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d003      	beq.n	8005430 <TIM_Base_SetConfig+0xa0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <TIM_Base_SetConfig+0xc4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d103      	bne.n	8005438 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	615a      	str	r2, [r3, #20]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40012c00 	.word	0x40012c00
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400

08005458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e04f      	b.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a21      	ldr	r2, [pc, #132]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d108      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a14      	ldr	r2, [pc, #80]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d004      	beq.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10c      	bne.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40014000 	.word	0x40014000

08005524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e040      	b.n	80055f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb fe52 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc28 	bl	8005df4 <UART_SetConfig>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e022      	b.n	80055f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fe50 	bl	800625c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fed7 	bl	80063a0 <UART_CheckIdleState>
 80055f2:	4603      	mov	r3, r0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560e:	2b20      	cmp	r3, #32
 8005610:	d178      	bne.n	8005704 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_UART_Transmit_DMA+0x22>
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e071      	b.n	8005706 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_UART_Transmit_DMA+0x34>
 800562c:	2302      	movs	r3, #2
 800562e:	e06a      	b.n	8005706 <HAL_UART_Transmit_DMA+0x10a>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2221      	movs	r2, #33	; 0x21
 800565a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d02b      	beq.n	80056bc <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005668:	4a29      	ldr	r2, [pc, #164]	; (8005710 <HAL_UART_Transmit_DMA+0x114>)
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005670:	4a28      	ldr	r2, [pc, #160]	; (8005714 <HAL_UART_Transmit_DMA+0x118>)
 8005672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005678:	4a27      	ldr	r2, [pc, #156]	; (8005718 <HAL_UART_Transmit_DMA+0x11c>)
 800567a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005680:	2200      	movs	r2, #0
 8005682:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568c:	4619      	mov	r1, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3328      	adds	r3, #40	; 0x28
 8005694:	461a      	mov	r2, r3
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	f7fd fbd4 	bl	8002e44 <HAL_DMA_Start_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2210      	movs	r2, #16
 80056a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e024      	b.n	8005706 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	613b      	str	r3, [r7, #16]
   return(result);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ec:	623a      	str	r2, [r7, #32]
 80056ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69f9      	ldr	r1, [r7, #28]
 80056f2:	6a3a      	ldr	r2, [r7, #32]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	3728      	adds	r7, #40	; 0x28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	0800681b 	.word	0x0800681b
 8005714:	080068b5 	.word	0x080068b5
 8005718:	08006a2d 	.word	0x08006a2d

0800571c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800572e:	2b20      	cmp	r3, #32
 8005730:	d142      	bne.n	80057b8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_UART_Receive_DMA+0x22>
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e03b      	b.n	80057ba <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_UART_Receive_DMA+0x34>
 800574c:	2302      	movs	r3, #2
 800574e:	e034      	b.n	80057ba <HAL_UART_Receive_DMA+0x9e>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_UART_Receive_DMA+0xa8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d01f      	beq.n	80057a8 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d018      	beq.n	80057a8 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	613b      	str	r3, [r7, #16]
   return(result);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	69f9      	ldr	r1, [r7, #28]
 800579a:	6a3a      	ldr	r2, [r7, #32]
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e6      	bne.n	8005776 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	461a      	mov	r2, r3
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 ff04 	bl	80065bc <UART_Start_Receive_DMA>
 80057b4:	4603      	mov	r3, r0
 80057b6:	e000      	b.n	80057ba <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3728      	adds	r7, #40	; 0x28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40008000 	.word	0x40008000

080057c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b0ba      	sub	sp, #232	; 0xe8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80057f6:	4013      	ands	r3, r2
 80057f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d115      	bne.n	8005830 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00f      	beq.n	8005830 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 82a6 	beq.w	8005d72 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
      }
      return;
 800582e:	e2a0      	b.n	8005d72 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8117 	beq.w	8005a68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800583a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800584a:	4b85      	ldr	r3, [pc, #532]	; (8005a60 <HAL_UART_IRQHandler+0x298>)
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 810a 	beq.w	8005a68 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <HAL_UART_IRQHandler+0xbc>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <HAL_UART_IRQHandler+0xec>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2202      	movs	r2, #2
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <HAL_UART_IRQHandler+0x11c>
 80058c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2204      	movs	r2, #4
 80058d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058da:	f043 0202 	orr.w	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005900:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2208      	movs	r2, #8
 800590e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005916:	f043 0208 	orr.w	r2, r3, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005928:	2b00      	cmp	r3, #0
 800592a:	d012      	beq.n	8005952 <HAL_UART_IRQHandler+0x18a>
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 820c 	beq.w	8005d76 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800598c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800599e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d04f      	beq.n	8005a4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fed2 	bl	8006754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d141      	bne.n	8005a42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d013      	beq.n	8005a3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_UART_IRQHandler+0x29c>)
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd faae 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e00f      	b.n	8005a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f9c4 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e00b      	b.n	8005a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9c0 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e007      	b.n	8005a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9bc 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a58:	e18d      	b.n	8005d76 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5a:	bf00      	nop
    return;
 8005a5c:	e18b      	b.n	8005d76 <HAL_UART_IRQHandler+0x5ae>
 8005a5e:	bf00      	nop
 8005a60:	04000120 	.word	0x04000120
 8005a64:	08006aa9 	.word	0x08006aa9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	f040 8146 	bne.w	8005cfe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 813f 	beq.w	8005cfe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8138 	beq.w	8005cfe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2210      	movs	r2, #16
 8005a94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	f040 80b4 	bne.w	8005c0e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 815f 	beq.w	8005d7a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	f080 8157 	bcs.w	8005d7a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 8085 	bne.w	8005bf2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1da      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3308      	adds	r3, #8
 8005b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e1      	bne.n	8005b32 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e3      	bne.n	8005b6e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc2:	f023 0310 	bic.w	r3, r3, #16
 8005bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e4      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fd f989 	bl	8002f04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f8e8 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c0c:	e0b5      	b.n	8005d7a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80a7 	beq.w	8005d7e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80a2 	beq.w	8005d7e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e4      	bne.n	8005c3a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c94:	633a      	str	r2, [r7, #48]	; 0x30
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e3      	bne.n	8005c70 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0310 	bic.w	r3, r3, #16
 8005cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	69b9      	ldr	r1, [r7, #24]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e4      	bne.n	8005cba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f870 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cfc:	e03f      	b.n	8005d7e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00e      	beq.n	8005d28 <HAL_UART_IRQHandler+0x560>
 8005d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 ff01 	bl	8006b28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d26:	e02d      	b.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00e      	beq.n	8005d52 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01c      	beq.n	8005d82 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
    }
    return;
 8005d50:	e017      	b.n	8005d82 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d012      	beq.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
 8005d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00c      	beq.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 feb2 	bl	8006ad4 <UART_EndTransmit_IT>
    return;
 8005d70:	e008      	b.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005d72:	bf00      	nop
 8005d74:	e006      	b.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005d76:	bf00      	nop
 8005d78:	e004      	b.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005d82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005d84:	37e8      	adds	r7, #232	; 0xe8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop

08005d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b5b0      	push	{r4, r5, r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4baa      	ldr	r3, [pc, #680]	; (80060c8 <UART_SetConfig+0x2d4>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	69f9      	ldr	r1, [r7, #28]
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a9f      	ldr	r2, [pc, #636]	; (80060cc <UART_SetConfig+0x2d8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a96      	ldr	r2, [pc, #600]	; (80060d0 <UART_SetConfig+0x2dc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d121      	bne.n	8005ebe <UART_SetConfig+0xca>
 8005e7a:	4b96      	ldr	r3, [pc, #600]	; (80060d4 <UART_SetConfig+0x2e0>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d817      	bhi.n	8005eb8 <UART_SetConfig+0xc4>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x9c>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ea1 	.word	0x08005ea1
 8005e94:	08005ead 	.word	0x08005ead
 8005e98:	08005ea7 	.word	0x08005ea7
 8005e9c:	08005eb3 	.word	0x08005eb3
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	76fb      	strb	r3, [r7, #27]
 8005ea4:	e096      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	76fb      	strb	r3, [r7, #27]
 8005eaa:	e093      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005eac:	2304      	movs	r3, #4
 8005eae:	76fb      	strb	r3, [r7, #27]
 8005eb0:	e090      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	76fb      	strb	r3, [r7, #27]
 8005eb6:	e08d      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	76fb      	strb	r3, [r7, #27]
 8005ebc:	e08a      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a85      	ldr	r2, [pc, #532]	; (80060d8 <UART_SetConfig+0x2e4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d132      	bne.n	8005f2e <UART_SetConfig+0x13a>
 8005ec8:	4b82      	ldr	r3, [pc, #520]	; (80060d4 <UART_SetConfig+0x2e0>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d828      	bhi.n	8005f28 <UART_SetConfig+0x134>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0xe8>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f11 	.word	0x08005f11
 8005ee0:	08005f29 	.word	0x08005f29
 8005ee4:	08005f29 	.word	0x08005f29
 8005ee8:	08005f29 	.word	0x08005f29
 8005eec:	08005f1d 	.word	0x08005f1d
 8005ef0:	08005f29 	.word	0x08005f29
 8005ef4:	08005f29 	.word	0x08005f29
 8005ef8:	08005f29 	.word	0x08005f29
 8005efc:	08005f17 	.word	0x08005f17
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f29 	.word	0x08005f29
 8005f0c:	08005f23 	.word	0x08005f23
 8005f10:	2300      	movs	r3, #0
 8005f12:	76fb      	strb	r3, [r7, #27]
 8005f14:	e05e      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f16:	2302      	movs	r3, #2
 8005f18:	76fb      	strb	r3, [r7, #27]
 8005f1a:	e05b      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	76fb      	strb	r3, [r7, #27]
 8005f20:	e058      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f22:	2308      	movs	r3, #8
 8005f24:	76fb      	strb	r3, [r7, #27]
 8005f26:	e055      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	76fb      	strb	r3, [r7, #27]
 8005f2c:	e052      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a6a      	ldr	r2, [pc, #424]	; (80060dc <UART_SetConfig+0x2e8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d120      	bne.n	8005f7a <UART_SetConfig+0x186>
 8005f38:	4b66      	ldr	r3, [pc, #408]	; (80060d4 <UART_SetConfig+0x2e0>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f42:	2b30      	cmp	r3, #48	; 0x30
 8005f44:	d013      	beq.n	8005f6e <UART_SetConfig+0x17a>
 8005f46:	2b30      	cmp	r3, #48	; 0x30
 8005f48:	d814      	bhi.n	8005f74 <UART_SetConfig+0x180>
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d009      	beq.n	8005f62 <UART_SetConfig+0x16e>
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d810      	bhi.n	8005f74 <UART_SetConfig+0x180>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <UART_SetConfig+0x168>
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d006      	beq.n	8005f68 <UART_SetConfig+0x174>
 8005f5a:	e00b      	b.n	8005f74 <UART_SetConfig+0x180>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	76fb      	strb	r3, [r7, #27]
 8005f60:	e038      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f62:	2302      	movs	r3, #2
 8005f64:	76fb      	strb	r3, [r7, #27]
 8005f66:	e035      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	76fb      	strb	r3, [r7, #27]
 8005f6c:	e032      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f6e:	2308      	movs	r3, #8
 8005f70:	76fb      	strb	r3, [r7, #27]
 8005f72:	e02f      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f74:	2310      	movs	r3, #16
 8005f76:	76fb      	strb	r3, [r7, #27]
 8005f78:	e02c      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a53      	ldr	r2, [pc, #332]	; (80060cc <UART_SetConfig+0x2d8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d125      	bne.n	8005fd0 <UART_SetConfig+0x1dc>
 8005f84:	4b53      	ldr	r3, [pc, #332]	; (80060d4 <UART_SetConfig+0x2e0>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f92:	d017      	beq.n	8005fc4 <UART_SetConfig+0x1d0>
 8005f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f98:	d817      	bhi.n	8005fca <UART_SetConfig+0x1d6>
 8005f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9e:	d00b      	beq.n	8005fb8 <UART_SetConfig+0x1c4>
 8005fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa4:	d811      	bhi.n	8005fca <UART_SetConfig+0x1d6>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <UART_SetConfig+0x1be>
 8005faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fae:	d006      	beq.n	8005fbe <UART_SetConfig+0x1ca>
 8005fb0:	e00b      	b.n	8005fca <UART_SetConfig+0x1d6>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	76fb      	strb	r3, [r7, #27]
 8005fb6:	e00d      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	76fb      	strb	r3, [r7, #27]
 8005fbc:	e00a      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	76fb      	strb	r3, [r7, #27]
 8005fc2:	e007      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	76fb      	strb	r3, [r7, #27]
 8005fc8:	e004      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005fca:	2310      	movs	r3, #16
 8005fcc:	76fb      	strb	r3, [r7, #27]
 8005fce:	e001      	b.n	8005fd4 <UART_SetConfig+0x1e0>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a3c      	ldr	r2, [pc, #240]	; (80060cc <UART_SetConfig+0x2d8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f040 8082 	bne.w	80060e4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fe0:	7efb      	ldrb	r3, [r7, #27]
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d823      	bhi.n	800602e <UART_SetConfig+0x23a>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x1f8>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	0800602f 	.word	0x0800602f
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	0800602f 	.word	0x0800602f
 8005ffc:	0800601f 	.word	0x0800601f
 8006000:	0800602f 	.word	0x0800602f
 8006004:	0800602f 	.word	0x0800602f
 8006008:	0800602f 	.word	0x0800602f
 800600c:	08006027 	.word	0x08006027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006010:	f7fe f890 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8006014:	6178      	str	r0, [r7, #20]
        break;
 8006016:	e00f      	b.n	8006038 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006018:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <UART_SetConfig+0x2ec>)
 800601a:	617b      	str	r3, [r7, #20]
        break;
 800601c:	e00c      	b.n	8006038 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601e:	f7fd fff1 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8006022:	6178      	str	r0, [r7, #20]
        break;
 8006024:	e008      	b.n	8006038 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602a:	617b      	str	r3, [r7, #20]
        break;
 800602c:	e004      	b.n	8006038 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	76bb      	strb	r3, [r7, #26]
        break;
 8006036:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8100 	beq.w	8006240 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4413      	add	r3, r2
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	429a      	cmp	r2, r3
 800604e:	d305      	bcc.n	800605c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	d902      	bls.n	8006062 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	76bb      	strb	r3, [r7, #26]
 8006060:	e0ee      	b.n	8006240 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4618      	mov	r0, r3
 8006066:	f04f 0100 	mov.w	r1, #0
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	020b      	lsls	r3, r1, #8
 8006074:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006078:	0202      	lsls	r2, r0, #8
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	6849      	ldr	r1, [r1, #4]
 800607e:	0849      	lsrs	r1, r1, #1
 8006080:	4608      	mov	r0, r1
 8006082:	f04f 0100 	mov.w	r1, #0
 8006086:	1814      	adds	r4, r2, r0
 8006088:	eb43 0501 	adc.w	r5, r3, r1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	461a      	mov	r2, r3
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	f7fa f899 	bl	80001d0 <__aeabi_uldivmod>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4613      	mov	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ac:	d308      	bcc.n	80060c0 <UART_SetConfig+0x2cc>
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b4:	d204      	bcs.n	80060c0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	e0bf      	b.n	8006240 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	76bb      	strb	r3, [r7, #26]
 80060c4:	e0bc      	b.n	8006240 <UART_SetConfig+0x44c>
 80060c6:	bf00      	nop
 80060c8:	efff69f3 	.word	0xefff69f3
 80060cc:	40008000 	.word	0x40008000
 80060d0:	40013800 	.word	0x40013800
 80060d4:	40021000 	.word	0x40021000
 80060d8:	40004400 	.word	0x40004400
 80060dc:	40004800 	.word	0x40004800
 80060e0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ec:	d15b      	bne.n	80061a6 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 80060ee:	7efb      	ldrb	r3, [r7, #27]
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d828      	bhi.n	8006146 <UART_SetConfig+0x352>
 80060f4:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <UART_SetConfig+0x308>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006121 	.word	0x08006121
 8006100:	08006129 	.word	0x08006129
 8006104:	08006131 	.word	0x08006131
 8006108:	08006147 	.word	0x08006147
 800610c:	08006137 	.word	0x08006137
 8006110:	08006147 	.word	0x08006147
 8006114:	08006147 	.word	0x08006147
 8006118:	08006147 	.word	0x08006147
 800611c:	0800613f 	.word	0x0800613f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006120:	f7fe f808 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8006124:	6178      	str	r0, [r7, #20]
        break;
 8006126:	e013      	b.n	8006150 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006128:	f7fe f81a 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 800612c:	6178      	str	r0, [r7, #20]
        break;
 800612e:	e00f      	b.n	8006150 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006130:	4b49      	ldr	r3, [pc, #292]	; (8006258 <UART_SetConfig+0x464>)
 8006132:	617b      	str	r3, [r7, #20]
        break;
 8006134:	e00c      	b.n	8006150 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006136:	f7fd ff65 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 800613a:	6178      	str	r0, [r7, #20]
        break;
 800613c:	e008      	b.n	8006150 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006142:	617b      	str	r3, [r7, #20]
        break;
 8006144:	e004      	b.n	8006150 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	76bb      	strb	r3, [r7, #26]
        break;
 800614e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d074      	beq.n	8006240 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	005a      	lsls	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	441a      	add	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	fbb2 f3f3 	udiv	r3, r2, r3
 800616a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0f      	cmp	r3, #15
 8006170:	d916      	bls.n	80061a0 <UART_SetConfig+0x3ac>
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006178:	d212      	bcs.n	80061a0 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f023 030f 	bic.w	r3, r3, #15
 8006182:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	b29b      	uxth	r3, r3
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	b29a      	uxth	r2, r3
 8006190:	89fb      	ldrh	r3, [r7, #14]
 8006192:	4313      	orrs	r3, r2
 8006194:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	89fa      	ldrh	r2, [r7, #14]
 800619c:	60da      	str	r2, [r3, #12]
 800619e:	e04f      	b.n	8006240 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	76bb      	strb	r3, [r7, #26]
 80061a4:	e04c      	b.n	8006240 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a6:	7efb      	ldrb	r3, [r7, #27]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d828      	bhi.n	80061fe <UART_SetConfig+0x40a>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x3c0>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	080061ff 	.word	0x080061ff
 80061c4:	080061ef 	.word	0x080061ef
 80061c8:	080061ff 	.word	0x080061ff
 80061cc:	080061ff 	.word	0x080061ff
 80061d0:	080061ff 	.word	0x080061ff
 80061d4:	080061f7 	.word	0x080061f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d8:	f7fd ffac 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 80061dc:	6178      	str	r0, [r7, #20]
        break;
 80061de:	e013      	b.n	8006208 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e0:	f7fd ffbe 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 80061e4:	6178      	str	r0, [r7, #20]
        break;
 80061e6:	e00f      	b.n	8006208 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <UART_SetConfig+0x464>)
 80061ea:	617b      	str	r3, [r7, #20]
        break;
 80061ec:	e00c      	b.n	8006208 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ee:	f7fd ff09 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80061f2:	6178      	str	r0, [r7, #20]
        break;
 80061f4:	e008      	b.n	8006208 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fa:	617b      	str	r3, [r7, #20]
        break;
 80061fc:	e004      	b.n	8006208 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	76bb      	strb	r3, [r7, #26]
        break;
 8006206:	bf00      	nop
    }

    if (pclk != 0U)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	085a      	lsrs	r2, r3, #1
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	441a      	add	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b0f      	cmp	r3, #15
 8006226:	d909      	bls.n	800623c <UART_SetConfig+0x448>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622e:	d205      	bcs.n	800623c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
 800623a:	e001      	b.n	8006240 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800624c:	7ebb      	ldrb	r3, [r7, #26]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bdb0      	pop	{r4, r5, r7, pc}
 8006256:	bf00      	nop
 8006258:	00f42400 	.word	0x00f42400

0800625c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01a      	beq.n	8006372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800635a:	d10a      	bne.n	8006372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	605a      	str	r2, [r3, #4]
  }
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063b0:	f7fb f8f4 	bl	800159c <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d10e      	bne.n	80063e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f82d 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e023      	b.n	800642a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d10e      	bne.n	800640e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f817 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e00d      	b.n	800642a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006442:	e0a5      	b.n	8006590 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	f000 80a1 	beq.w	8006590 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fb f8a5 	bl	800159c <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	2b00      	cmp	r3, #0
 8006462:	d13e      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006478:	667b      	str	r3, [r7, #100]	; 0x64
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006484:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	663b      	str	r3, [r7, #96]	; 0x60
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e067      	b.n	80065b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d04f      	beq.n	8006590 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064fe:	d147      	bne.n	8006590 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006508:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800651e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
 800652a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800652e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e6      	bne.n	800650a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	613b      	str	r3, [r7, #16]
   return(result);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f023 0301 	bic.w	r3, r3, #1
 8006552:	66bb      	str	r3, [r7, #104]	; 0x68
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800655c:	623a      	str	r2, [r7, #32]
 800655e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	69f9      	ldr	r1, [r7, #28]
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	61bb      	str	r3, [r7, #24]
   return(result);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e5      	bne.n	800653c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e010      	b.n	80065b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69da      	ldr	r2, [r3, #28]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4013      	ands	r3, r2
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	429a      	cmp	r2, r3
 800659e:	bf0c      	ite	eq
 80065a0:	2301      	moveq	r3, #1
 80065a2:	2300      	movne	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f43f af4a 	beq.w	8006444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3770      	adds	r7, #112	; 0x70
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b096      	sub	sp, #88	; 0x58
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2222      	movs	r2, #34	; 0x22
 80065e4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d02b      	beq.n	8006646 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	4a42      	ldr	r2, [pc, #264]	; (80066fc <UART_Start_Receive_DMA+0x140>)
 80065f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	4a41      	ldr	r2, [pc, #260]	; (8006700 <UART_Start_Receive_DMA+0x144>)
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006602:	4a40      	ldr	r2, [pc, #256]	; (8006704 <UART_Start_Receive_DMA+0x148>)
 8006604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	2200      	movs	r2, #0
 800660c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3324      	adds	r3, #36	; 0x24
 8006618:	4619      	mov	r1, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	461a      	mov	r2, r3
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	f7fc fc0f 	bl	8002e44 <HAL_DMA_Start_IT>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00c      	beq.n	8006646 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2210      	movs	r2, #16
 8006630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e055      	b.n	80066f2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d018      	beq.n	8006688 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666a:	657b      	str	r3, [r7, #84]	; 0x54
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
 8006676:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800667a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	653b      	str	r3, [r7, #80]	; 0x50
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066a8:	637a      	str	r2, [r7, #52]	; 0x34
 80066aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	613b      	str	r3, [r7, #16]
   return(result);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066dc:	623a      	str	r2, [r7, #32]
 80066de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	6a3a      	ldr	r2, [r7, #32]
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3758      	adds	r7, #88	; 0x58
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	080068d1 	.word	0x080068d1
 8006700:	080069f5 	.word	0x080069f5
 8006704:	08006a2d 	.word	0x08006a2d

08006708 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	; 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
   return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006748:	bf00      	nop
 800674a:	3724      	adds	r7, #36	; 0x24
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b095      	sub	sp, #84	; 0x54
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	643b      	str	r3, [r7, #64]	; 0x40
 800677c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	61fb      	str	r3, [r7, #28]
   return(result);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d118      	bne.n	80067fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	613b      	str	r3, [r7, #16]
   return(result);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800680e:	bf00      	nop
 8006810:	3754      	adds	r7, #84	; 0x54
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b090      	sub	sp, #64	; 0x40
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d137      	bne.n	80068a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006838:	2200      	movs	r2, #0
 800683a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800683e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	623b      	str	r3, [r7, #32]
   return(result);
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800685e:	633a      	str	r2, [r7, #48]	; 0x30
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	69b9      	ldr	r1, [r7, #24]
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	617b      	str	r3, [r7, #20]
   return(result);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e6      	bne.n	8006872 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068a4:	e002      	b.n	80068ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068a8:	f7ff fa70 	bl	8005d8c <HAL_UART_TxCpltCallback>
}
 80068ac:	bf00      	nop
 80068ae:	3740      	adds	r7, #64	; 0x40
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff fa6c 	bl	8005da0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b09c      	sub	sp, #112	; 0x70
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d170      	bne.n	80069ce <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80068ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006908:	66bb      	str	r3, [r7, #104]	; 0x68
 800690a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006912:	65bb      	str	r3, [r7, #88]	; 0x58
 8006914:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e6      	bne.n	80068f4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	667b      	str	r3, [r7, #100]	; 0x64
 800693e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3308      	adds	r3, #8
 8006944:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006946:	647a      	str	r2, [r7, #68]	; 0x44
 8006948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800694c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	623b      	str	r3, [r7, #32]
   return(result);
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006970:	663b      	str	r3, [r7, #96]	; 0x60
 8006972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800697a:	633a      	str	r2, [r7, #48]	; 0x30
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800698e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006990:	2220      	movs	r2, #32
 8006992:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006998:	2b01      	cmp	r3, #1
 800699a:	d118      	bne.n	80069ce <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f023 0310 	bic.w	r3, r3, #16
 80069b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	617b      	str	r3, [r7, #20]
   return(result);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e6      	bne.n	800699c <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d107      	bne.n	80069e6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069dc:	4619      	mov	r1, r3
 80069de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069e0:	f7ff f9fc 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069e4:	e002      	b.n	80069ec <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80069e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069e8:	f7fa fa18 	bl	8000e1c <HAL_UART_RxCpltCallback>
}
 80069ec:	bf00      	nop
 80069ee:	3770      	adds	r7, #112	; 0x70
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d109      	bne.n	8006a1e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	4619      	mov	r1, r3
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff f9e0 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a1c:	e002      	b.n	8006a24 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff f9c8 	bl	8005db4 <HAL_UART_RxHalfCpltCallback>
}
 8006a24:	bf00      	nop
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d109      	bne.n	8006a68 <UART_DMAError+0x3c>
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b21      	cmp	r3, #33	; 0x21
 8006a58:	d106      	bne.n	8006a68 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006a62:	6978      	ldr	r0, [r7, #20]
 8006a64:	f7ff fe50 	bl	8006708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d109      	bne.n	8006a8a <UART_DMAError+0x5e>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b22      	cmp	r3, #34	; 0x22
 8006a7a:	d106      	bne.n	8006a8a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006a84:	6978      	ldr	r0, [r7, #20]
 8006a86:	f7ff fe65 	bl	8006754 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	f043 0210 	orr.w	r2, r3, #16
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	f7ff f994 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa0:	bf00      	nop
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff f97e 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6979      	ldr	r1, [r7, #20]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	613b      	str	r3, [r7, #16]
   return(result);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff f936 	bl	8005d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b20:	bf00      	nop
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f103 0208 	add.w	r2, r3, #8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f103 0208 	add.w	r2, r3, #8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f103 0208 	add.w	r2, r3, #8
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d103      	bne.n	8006bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e00c      	b.n	8006c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3308      	adds	r3, #8
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e002      	b.n	8006c0c <vListInsert+0x2e>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d2f6      	bcs.n	8006c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6892      	ldr	r2, [r2, #8]
 8006c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6852      	ldr	r2, [r2, #4]
 8006c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d103      	bne.n	8006c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	1e5a      	subs	r2, r3, #1
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006cce:	f001 fb79 	bl	80083c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cda:	68f9      	ldr	r1, [r7, #12]
 8006cdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cde:	fb01 f303 	mul.w	r3, r1, r3
 8006ce2:	441a      	add	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	68f9      	ldr	r1, [r7, #12]
 8006d02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	441a      	add	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	22ff      	movs	r2, #255	; 0xff
 8006d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	22ff      	movs	r2, #255	; 0xff
 8006d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d114      	bne.n	8006d4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01a      	beq.n	8006d62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3310      	adds	r3, #16
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fec1 	bl	8007ab8 <xTaskRemoveFromEventList>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d012      	beq.n	8006d62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <xQueueGenericReset+0xcc>)
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	e009      	b.n	8006d62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3310      	adds	r3, #16
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fef2 	bl	8006b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3324      	adds	r3, #36	; 0x24
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff feed 	bl	8006b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d62:	f001 fb5f 	bl	8008424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d66:	2301      	movs	r3, #1
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	613b      	str	r3, [r7, #16]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3348      	adds	r3, #72	; 0x48
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 fc2b 	bl	8008608 <pvPortMalloc>
 8006db2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d011      	beq.n	8006dde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	3348      	adds	r3, #72	; 0x48
 8006dc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dcc:	79fa      	ldrb	r2, [r7, #7]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f805 	bl	8006de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dde:	69bb      	ldr	r3, [r7, #24]
	}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3720      	adds	r7, #32
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e002      	b.n	8006e0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e16:	2101      	movs	r1, #1
 8006e18:	69b8      	ldr	r0, [r7, #24]
 8006e1a:	f7ff ff43 	bl	8006ca4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b08e      	sub	sp, #56	; 0x38
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	623b      	str	r3, [r7, #32]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	61fb      	str	r3, [r7, #28]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d103      	bne.n	8006e7e <xQueueGiveFromISR+0x58>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <xQueueGiveFromISR+0x5c>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <xQueueGiveFromISR+0x5e>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61bb      	str	r3, [r7, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e9e:	f001 fb73 	bl	8008588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	617a      	str	r2, [r7, #20]
 8006eb8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d22b      	bcs.n	8006f26 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d112      	bne.n	8006f10 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	3324      	adds	r3, #36	; 0x24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fdde 	bl	8007ab8 <xTaskRemoveFromEventList>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e007      	b.n	8006f20 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f14:	3301      	adds	r3, #1
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	b25a      	sxtb	r2, r3
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f20:	2301      	movs	r3, #1
 8006f22:	637b      	str	r3, [r7, #52]	; 0x34
 8006f24:	e001      	b.n	8006f2a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3738      	adds	r7, #56	; 0x38
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	; 0x38
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	623b      	str	r3, [r7, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	61fb      	str	r3, [r7, #28]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f90:	f000 ff52 	bl	8007e38 <xTaskGetSchedulerState>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <xQueueSemaphoreTake+0x60>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <xQueueSemaphoreTake+0x64>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <xQueueSemaphoreTake+0x66>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	61bb      	str	r3, [r7, #24]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fc0:	f001 fa00 	bl	80083c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d024      	beq.n	800701a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	1e5a      	subs	r2, r3, #1
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fe0:	f001 f84c 	bl	800807c <pvTaskIncrementMutexHeldCount>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00f      	beq.n	8007012 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fd5e 	bl	8007ab8 <xTaskRemoveFromEventList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007002:	4b54      	ldr	r3, [pc, #336]	; (8007154 <xQueueSemaphoreTake+0x214>)
 8007004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007012:	f001 fa07 	bl	8008424 <vPortExitCritical>
				return pdPASS;
 8007016:	2301      	movs	r3, #1
 8007018:	e097      	b.n	800714a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d111      	bne.n	8007044 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	617b      	str	r3, [r7, #20]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800703c:	f001 f9f2 	bl	8008424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007040:	2300      	movs	r3, #0
 8007042:	e082      	b.n	800714a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800704a:	f107 030c 	add.w	r3, r7, #12
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fd94 	bl	8007b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007058:	f001 f9e4 	bl	8008424 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800705c:	f000 fb44 	bl	80076e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007060:	f001 f9b0 	bl	80083c4 <vPortEnterCritical>
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800706a:	b25b      	sxtb	r3, r3
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d103      	bne.n	800707a <xQueueSemaphoreTake+0x13a>
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007080:	b25b      	sxtb	r3, r3
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d103      	bne.n	8007090 <xQueueSemaphoreTake+0x150>
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007090:	f001 f9c8 	bl	8008424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007094:	463a      	mov	r2, r7
 8007096:	f107 030c 	add.w	r3, r7, #12
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fd83 	bl	8007ba8 <xTaskCheckForTimeOut>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d132      	bne.n	800710e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070aa:	f000 f8bf 	bl	800722c <prvIsQueueEmpty>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d026      	beq.n	8007102 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80070bc:	f001 f982 	bl	80083c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fed5 	bl	8007e74 <xTaskPriorityInherit>
 80070ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80070cc:	f001 f9aa 	bl	8008424 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	3324      	adds	r3, #36	; 0x24
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fcc9 	bl	8007a70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070e0:	f000 f852 	bl	8007188 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070e4:	f000 fb0e 	bl	8007704 <xTaskResumeAll>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f47f af68 	bne.w	8006fc0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80070f0:	4b18      	ldr	r3, [pc, #96]	; (8007154 <xQueueSemaphoreTake+0x214>)
 80070f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	e75e      	b.n	8006fc0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007104:	f000 f840 	bl	8007188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007108:	f000 fafc 	bl	8007704 <xTaskResumeAll>
 800710c:	e758      	b.n	8006fc0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800710e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007110:	f000 f83a 	bl	8007188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007114:	f000 faf6 	bl	8007704 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800711a:	f000 f887 	bl	800722c <prvIsQueueEmpty>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	f43f af4d 	beq.w	8006fc0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800712c:	f001 f94a 	bl	80083c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007132:	f000 f811 	bl	8007158 <prvGetDisinheritPriorityAfterTimeout>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800713e:	4618      	mov	r0, r3
 8007140:	f000 ff0e 	bl	8007f60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007144:	f001 f96e 	bl	8008424 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800714a:	4618      	mov	r0, r3
 800714c:	3738      	adds	r7, #56	; 0x38
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d006      	beq.n	8007176 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1c3 0307 	rsb	r3, r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e001      	b.n	800717a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800717a:	68fb      	ldr	r3, [r7, #12]
	}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007190:	f001 f918 	bl	80083c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800719a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800719c:	e011      	b.n	80071c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d012      	beq.n	80071cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3324      	adds	r3, #36	; 0x24
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fc84 	bl	8007ab8 <xTaskRemoveFromEventList>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071b6:	f000 fd59 	bl	8007c6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	3b01      	subs	r3, #1
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dce9      	bgt.n	800719e <prvUnlockQueue+0x16>
 80071ca:	e000      	b.n	80071ce <prvUnlockQueue+0x46>
					break;
 80071cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071d6:	f001 f925 	bl	8008424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071da:	f001 f8f3 	bl	80083c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071e6:	e011      	b.n	800720c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d012      	beq.n	8007216 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3310      	adds	r3, #16
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fc5f 	bl	8007ab8 <xTaskRemoveFromEventList>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007200:	f000 fd34 	bl	8007c6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	3b01      	subs	r3, #1
 8007208:	b2db      	uxtb	r3, r3
 800720a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800720c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007210:	2b00      	cmp	r3, #0
 8007212:	dce9      	bgt.n	80071e8 <prvUnlockQueue+0x60>
 8007214:	e000      	b.n	8007218 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007216:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	22ff      	movs	r2, #255	; 0xff
 800721c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007220:	f001 f900 	bl	8008424 <vPortExitCritical>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007234:	f001 f8c6 	bl	80083c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007240:	2301      	movs	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e001      	b.n	800724a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800724a:	f001 f8eb 	bl	8008424 <vPortExitCritical>

	return xReturn;
 800724e:	68fb      	ldr	r3, [r7, #12]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08e      	sub	sp, #56	; 0x38
 800725c:	af04      	add	r7, sp, #16
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10a      	bne.n	8007282 <xTaskCreateStatic+0x2a>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	623b      	str	r3, [r7, #32]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xTaskCreateStatic+0x46>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	61fb      	str	r3, [r7, #28]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800729e:	23b4      	movs	r3, #180	; 0xb4
 80072a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2bb4      	cmp	r3, #180	; 0xb4
 80072a6:	d00a      	beq.n	80072be <xTaskCreateStatic+0x66>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	61bb      	str	r3, [r7, #24]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01e      	beq.n	8007304 <xTaskCreateStatic+0xac>
 80072c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01b      	beq.n	8007304 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072de:	2300      	movs	r3, #0
 80072e0:	9303      	str	r3, [sp, #12]
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	9302      	str	r3, [sp, #8]
 80072e6:	f107 0314 	add.w	r3, r7, #20
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f850 	bl	800739c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072fe:	f000 f8eb 	bl	80074d8 <prvAddNewTaskToReadyList>
 8007302:	e001      	b.n	8007308 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007308:	697b      	ldr	r3, [r7, #20]
	}
 800730a:	4618      	mov	r0, r3
 800730c:	3728      	adds	r7, #40	; 0x28
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007312:	b580      	push	{r7, lr}
 8007314:	b08c      	sub	sp, #48	; 0x30
 8007316:	af04      	add	r7, sp, #16
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4613      	mov	r3, r2
 8007320:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4618      	mov	r0, r3
 8007328:	f001 f96e 	bl	8008608 <pvPortMalloc>
 800732c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00e      	beq.n	8007352 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007334:	20b4      	movs	r0, #180	; 0xb4
 8007336:	f001 f967 	bl	8008608 <pvPortMalloc>
 800733a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
 8007348:	e005      	b.n	8007356 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f001 fa28 	bl	80087a0 <vPortFree>
 8007350:	e001      	b.n	8007356 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d017      	beq.n	800738c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007364:	88fa      	ldrh	r2, [r7, #6]
 8007366:	2300      	movs	r3, #0
 8007368:	9303      	str	r3, [sp, #12]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	9302      	str	r3, [sp, #8]
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f80e 	bl	800739c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007380:	69f8      	ldr	r0, [r7, #28]
 8007382:	f000 f8a9 	bl	80074d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007386:	2301      	movs	r3, #1
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	e002      	b.n	8007392 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007392:	69bb      	ldr	r3, [r7, #24]
	}
 8007394:	4618      	mov	r0, r3
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	3b01      	subs	r3, #1
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	617b      	str	r3, [r7, #20]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01f      	beq.n	800742a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	e012      	b.n	8007416 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	4413      	add	r3, r2
 80073f6:	7819      	ldrb	r1, [r3, #0]
 80073f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	3334      	adds	r3, #52	; 0x34
 8007400:	460a      	mov	r2, r1
 8007402:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d006      	beq.n	800741e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	3301      	adds	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2b0f      	cmp	r3, #15
 800741a:	d9e9      	bls.n	80073f0 <prvInitialiseNewTask+0x54>
 800741c:	e000      	b.n	8007420 <prvInitialiseNewTask+0x84>
			{
				break;
 800741e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007428:	e003      	b.n	8007432 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	2b06      	cmp	r3, #6
 8007436:	d901      	bls.n	800743c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007438:	2306      	movs	r3, #6
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007440:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007446:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	2200      	movs	r2, #0
 800744c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	3304      	adds	r3, #4
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fb92 	bl	8006b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	3318      	adds	r3, #24
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff fb8d 	bl	8006b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	f1c3 0207 	rsb	r2, r3, #7
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	334c      	adds	r3, #76	; 0x4c
 800748c:	2260      	movs	r2, #96	; 0x60
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f001 fad7 	bl	8008a44 <memset>
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	4a0c      	ldr	r2, [pc, #48]	; (80074cc <prvInitialiseNewTask+0x130>)
 800749a:	651a      	str	r2, [r3, #80]	; 0x50
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <prvInitialiseNewTask+0x134>)
 80074a0:	655a      	str	r2, [r3, #84]	; 0x54
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	4a0b      	ldr	r2, [pc, #44]	; (80074d4 <prvInitialiseNewTask+0x138>)
 80074a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	69b8      	ldr	r0, [r7, #24]
 80074ae:	f000 fe5f 	bl	8008170 <pxPortInitialiseStack>
 80074b2:	4602      	mov	r2, r0
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c4:	bf00      	nop
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	08008c7c 	.word	0x08008c7c
 80074d0:	08008c9c 	.word	0x08008c9c
 80074d4:	08008c5c 	.word	0x08008c5c

080074d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074e0:	f000 ff70 	bl	80083c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074e4:	4b2a      	ldr	r3, [pc, #168]	; (8007590 <prvAddNewTaskToReadyList+0xb8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3301      	adds	r3, #1
 80074ea:	4a29      	ldr	r2, [pc, #164]	; (8007590 <prvAddNewTaskToReadyList+0xb8>)
 80074ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <prvAddNewTaskToReadyList+0xbc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074f6:	4a27      	ldr	r2, [pc, #156]	; (8007594 <prvAddNewTaskToReadyList+0xbc>)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074fc:	4b24      	ldr	r3, [pc, #144]	; (8007590 <prvAddNewTaskToReadyList+0xb8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d110      	bne.n	8007526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007504:	f000 fbd6 	bl	8007cb4 <prvInitialiseTaskLists>
 8007508:	e00d      	b.n	8007526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800750a:	4b23      	ldr	r3, [pc, #140]	; (8007598 <prvAddNewTaskToReadyList+0xc0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007512:	4b20      	ldr	r3, [pc, #128]	; (8007594 <prvAddNewTaskToReadyList+0xbc>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	429a      	cmp	r2, r3
 800751e:	d802      	bhi.n	8007526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <prvAddNewTaskToReadyList+0xbc>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007526:	4b1d      	ldr	r3, [pc, #116]	; (800759c <prvAddNewTaskToReadyList+0xc4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	4a1b      	ldr	r2, [pc, #108]	; (800759c <prvAddNewTaskToReadyList+0xc4>)
 800752e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	2201      	movs	r2, #1
 8007536:	409a      	lsls	r2, r3
 8007538:	4b19      	ldr	r3, [pc, #100]	; (80075a0 <prvAddNewTaskToReadyList+0xc8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4313      	orrs	r3, r2
 800753e:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <prvAddNewTaskToReadyList+0xc8>)
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <prvAddNewTaskToReadyList+0xcc>)
 8007550:	441a      	add	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3304      	adds	r3, #4
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f7ff fb1c 	bl	8006b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800755e:	f000 ff61 	bl	8008424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007562:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <prvAddNewTaskToReadyList+0xc0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00e      	beq.n	8007588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800756a:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <prvAddNewTaskToReadyList+0xbc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	429a      	cmp	r2, r3
 8007576:	d207      	bcs.n	8007588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <prvAddNewTaskToReadyList+0xd0>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000464 	.word	0x20000464
 8007594:	20000364 	.word	0x20000364
 8007598:	20000470 	.word	0x20000470
 800759c:	20000480 	.word	0x20000480
 80075a0:	2000046c 	.word	0x2000046c
 80075a4:	20000368 	.word	0x20000368
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d017      	beq.n	80075ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <vTaskDelay+0x60>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <vTaskDelay+0x30>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	60bb      	str	r3, [r7, #8]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075dc:	f000 f884 	bl	80076e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075e0:	2100      	movs	r1, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fd5e 	bl	80080a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075e8:	f000 f88c 	bl	8007704 <xTaskResumeAll>
 80075ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d107      	bne.n	8007604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <vTaskDelay+0x64>)
 80075f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007604:	bf00      	nop
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	2000048c 	.word	0x2000048c
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007622:	463a      	mov	r2, r7
 8007624:	1d39      	adds	r1, r7, #4
 8007626:	f107 0308 	add.w	r3, r7, #8
 800762a:	4618      	mov	r0, r3
 800762c:	f7f8 ff4c 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	9202      	str	r2, [sp, #8]
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	2300      	movs	r3, #0
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	2300      	movs	r3, #0
 8007640:	460a      	mov	r2, r1
 8007642:	4921      	ldr	r1, [pc, #132]	; (80076c8 <vTaskStartScheduler+0xb4>)
 8007644:	4821      	ldr	r0, [pc, #132]	; (80076cc <vTaskStartScheduler+0xb8>)
 8007646:	f7ff fe07 	bl	8007258 <xTaskCreateStatic>
 800764a:	4603      	mov	r3, r0
 800764c:	4a20      	ldr	r2, [pc, #128]	; (80076d0 <vTaskStartScheduler+0xbc>)
 800764e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <vTaskStartScheduler+0xbc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007658:	2301      	movs	r3, #1
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	e001      	b.n	8007662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d11b      	bne.n	80076a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	613b      	str	r3, [r7, #16]
}
 800767a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800767c:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <vTaskStartScheduler+0xc0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	334c      	adds	r3, #76	; 0x4c
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <vTaskStartScheduler+0xc4>)
 8007684:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <vTaskStartScheduler+0xc8>)
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800768e:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <vTaskStartScheduler+0xcc>)
 8007690:	2201      	movs	r2, #1
 8007692:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <vTaskStartScheduler+0xd0>)
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800769a:	f000 fdf1 	bl	8008280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800769e:	e00e      	b.n	80076be <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a6:	d10a      	bne.n	80076be <vTaskStartScheduler+0xaa>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <vTaskStartScheduler+0xa8>
}
 80076be:	bf00      	nop
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	08008c0c 	.word	0x08008c0c
 80076cc:	08007c85 	.word	0x08007c85
 80076d0:	20000488 	.word	0x20000488
 80076d4:	20000364 	.word	0x20000364
 80076d8:	20000028 	.word	0x20000028
 80076dc:	20000484 	.word	0x20000484
 80076e0:	20000470 	.word	0x20000470
 80076e4:	20000468 	.word	0x20000468

080076e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076ec:	4b04      	ldr	r3, [pc, #16]	; (8007700 <vTaskSuspendAll+0x18>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	4a03      	ldr	r2, [pc, #12]	; (8007700 <vTaskSuspendAll+0x18>)
 80076f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076f6:	bf00      	nop
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	2000048c 	.word	0x2000048c

08007704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800770e:	2300      	movs	r3, #0
 8007710:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007712:	4b41      	ldr	r3, [pc, #260]	; (8007818 <xTaskResumeAll+0x114>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <xTaskResumeAll+0x2c>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	603b      	str	r3, [r7, #0]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007730:	f000 fe48 	bl	80083c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007734:	4b38      	ldr	r3, [pc, #224]	; (8007818 <xTaskResumeAll+0x114>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3b01      	subs	r3, #1
 800773a:	4a37      	ldr	r2, [pc, #220]	; (8007818 <xTaskResumeAll+0x114>)
 800773c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800773e:	4b36      	ldr	r3, [pc, #216]	; (8007818 <xTaskResumeAll+0x114>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d161      	bne.n	800780a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007746:	4b35      	ldr	r3, [pc, #212]	; (800781c <xTaskResumeAll+0x118>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d05d      	beq.n	800780a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800774e:	e02e      	b.n	80077ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007750:	4b33      	ldr	r3, [pc, #204]	; (8007820 <xTaskResumeAll+0x11c>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3318      	adds	r3, #24
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fa77 	bl	8006c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fa72 	bl	8006c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	2201      	movs	r2, #1
 8007772:	409a      	lsls	r2, r3
 8007774:	4b2b      	ldr	r3, [pc, #172]	; (8007824 <xTaskResumeAll+0x120>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4313      	orrs	r3, r2
 800777a:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <xTaskResumeAll+0x120>)
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4a27      	ldr	r2, [pc, #156]	; (8007828 <xTaskResumeAll+0x124>)
 800778c:	441a      	add	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f7ff f9fe 	bl	8006b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	4b23      	ldr	r3, [pc, #140]	; (800782c <xTaskResumeAll+0x128>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d302      	bcc.n	80077ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077a8:	4b21      	ldr	r3, [pc, #132]	; (8007830 <xTaskResumeAll+0x12c>)
 80077aa:	2201      	movs	r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ae:	4b1c      	ldr	r3, [pc, #112]	; (8007820 <xTaskResumeAll+0x11c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1cc      	bne.n	8007750 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077bc:	f000 fb1c 	bl	8007df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077c0:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <xTaskResumeAll+0x130>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d010      	beq.n	80077ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077cc:	f000 f836 	bl	800783c <xTaskIncrementTick>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077d6:	4b16      	ldr	r3, [pc, #88]	; (8007830 <xTaskResumeAll+0x12c>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3b01      	subs	r3, #1
 80077e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f1      	bne.n	80077cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80077e8:	4b12      	ldr	r3, [pc, #72]	; (8007834 <xTaskResumeAll+0x130>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <xTaskResumeAll+0x12c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077f6:	2301      	movs	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <xTaskResumeAll+0x134>)
 80077fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800780a:	f000 fe0b 	bl	8008424 <vPortExitCritical>

	return xAlreadyYielded;
 800780e:	68bb      	ldr	r3, [r7, #8]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	2000048c 	.word	0x2000048c
 800781c:	20000464 	.word	0x20000464
 8007820:	20000424 	.word	0x20000424
 8007824:	2000046c 	.word	0x2000046c
 8007828:	20000368 	.word	0x20000368
 800782c:	20000364 	.word	0x20000364
 8007830:	20000478 	.word	0x20000478
 8007834:	20000474 	.word	0x20000474
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007846:	4b4e      	ldr	r3, [pc, #312]	; (8007980 <xTaskIncrementTick+0x144>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 808e 	bne.w	800796c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007850:	4b4c      	ldr	r3, [pc, #304]	; (8007984 <xTaskIncrementTick+0x148>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007858:	4a4a      	ldr	r2, [pc, #296]	; (8007984 <xTaskIncrementTick+0x148>)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d120      	bne.n	80078a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007864:	4b48      	ldr	r3, [pc, #288]	; (8007988 <xTaskIncrementTick+0x14c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <xTaskIncrementTick+0x48>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	603b      	str	r3, [r7, #0]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <xTaskIncrementTick+0x46>
 8007884:	4b40      	ldr	r3, [pc, #256]	; (8007988 <xTaskIncrementTick+0x14c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	4b40      	ldr	r3, [pc, #256]	; (800798c <xTaskIncrementTick+0x150>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a3e      	ldr	r2, [pc, #248]	; (8007988 <xTaskIncrementTick+0x14c>)
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	4a3e      	ldr	r2, [pc, #248]	; (800798c <xTaskIncrementTick+0x150>)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	4b3d      	ldr	r3, [pc, #244]	; (8007990 <xTaskIncrementTick+0x154>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3301      	adds	r3, #1
 800789e:	4a3c      	ldr	r2, [pc, #240]	; (8007990 <xTaskIncrementTick+0x154>)
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	f000 faa9 	bl	8007df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078a6:	4b3b      	ldr	r3, [pc, #236]	; (8007994 <xTaskIncrementTick+0x158>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d348      	bcc.n	8007942 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078b0:	4b35      	ldr	r3, [pc, #212]	; (8007988 <xTaskIncrementTick+0x14c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d104      	bne.n	80078c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ba:	4b36      	ldr	r3, [pc, #216]	; (8007994 <xTaskIncrementTick+0x158>)
 80078bc:	f04f 32ff 	mov.w	r2, #4294967295
 80078c0:	601a      	str	r2, [r3, #0]
					break;
 80078c2:	e03e      	b.n	8007942 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c4:	4b30      	ldr	r3, [pc, #192]	; (8007988 <xTaskIncrementTick+0x14c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d203      	bcs.n	80078e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078dc:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <xTaskIncrementTick+0x158>)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078e2:	e02e      	b.n	8007942 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff f9b1 	bl	8006c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d004      	beq.n	8007900 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	3318      	adds	r3, #24
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff f9a8 	bl	8006c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	2201      	movs	r2, #1
 8007906:	409a      	lsls	r2, r3
 8007908:	4b23      	ldr	r3, [pc, #140]	; (8007998 <xTaskIncrementTick+0x15c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4313      	orrs	r3, r2
 800790e:	4a22      	ldr	r2, [pc, #136]	; (8007998 <xTaskIncrementTick+0x15c>)
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4a1f      	ldr	r2, [pc, #124]	; (800799c <xTaskIncrementTick+0x160>)
 8007920:	441a      	add	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	3304      	adds	r3, #4
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f7ff f934 	bl	8006b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007932:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <xTaskIncrementTick+0x164>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	429a      	cmp	r2, r3
 800793a:	d3b9      	bcc.n	80078b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800793c:	2301      	movs	r3, #1
 800793e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007940:	e7b6      	b.n	80078b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007942:	4b17      	ldr	r3, [pc, #92]	; (80079a0 <xTaskIncrementTick+0x164>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007948:	4914      	ldr	r1, [pc, #80]	; (800799c <xTaskIncrementTick+0x160>)
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d901      	bls.n	800795e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800795a:	2301      	movs	r3, #1
 800795c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800795e:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <xTaskIncrementTick+0x168>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007966:	2301      	movs	r3, #1
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	e004      	b.n	8007976 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800796c:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <xTaskIncrementTick+0x16c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	4a0d      	ldr	r2, [pc, #52]	; (80079a8 <xTaskIncrementTick+0x16c>)
 8007974:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007976:	697b      	ldr	r3, [r7, #20]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	2000048c 	.word	0x2000048c
 8007984:	20000468 	.word	0x20000468
 8007988:	2000041c 	.word	0x2000041c
 800798c:	20000420 	.word	0x20000420
 8007990:	2000047c 	.word	0x2000047c
 8007994:	20000484 	.word	0x20000484
 8007998:	2000046c 	.word	0x2000046c
 800799c:	20000368 	.word	0x20000368
 80079a0:	20000364 	.word	0x20000364
 80079a4:	20000478 	.word	0x20000478
 80079a8:	20000474 	.word	0x20000474

080079ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079b2:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <vTaskSwitchContext+0xac>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079ba:	4b28      	ldr	r3, [pc, #160]	; (8007a5c <vTaskSwitchContext+0xb0>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079c0:	e044      	b.n	8007a4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80079c2:	4b26      	ldr	r3, [pc, #152]	; (8007a5c <vTaskSwitchContext+0xb0>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c8:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <vTaskSwitchContext+0xb4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	fab3 f383 	clz	r3, r3
 80079d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	f1c3 031f 	rsb	r3, r3, #31
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	4921      	ldr	r1, [pc, #132]	; (8007a64 <vTaskSwitchContext+0xb8>)
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <vTaskSwitchContext+0x5c>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	607b      	str	r3, [r7, #4]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <vTaskSwitchContext+0x5a>
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4a14      	ldr	r2, [pc, #80]	; (8007a64 <vTaskSwitchContext+0xb8>)
 8007a14:	4413      	add	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	605a      	str	r2, [r3, #4]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d104      	bne.n	8007a38 <vTaskSwitchContext+0x8c>
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	; (8007a68 <vTaskSwitchContext+0xbc>)
 8007a40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <vTaskSwitchContext+0xbc>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	334c      	adds	r3, #76	; 0x4c
 8007a48:	4a08      	ldr	r2, [pc, #32]	; (8007a6c <vTaskSwitchContext+0xc0>)
 8007a4a:	6013      	str	r3, [r2, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	2000048c 	.word	0x2000048c
 8007a5c:	20000478 	.word	0x20000478
 8007a60:	2000046c 	.word	0x2000046c
 8007a64:	20000368 	.word	0x20000368
 8007a68:	20000364 	.word	0x20000364
 8007a6c:	20000028 	.word	0x20000028

08007a70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60fb      	str	r3, [r7, #12]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <vTaskPlaceOnEventList+0x44>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3318      	adds	r3, #24
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f89d 	bl	8006bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6838      	ldr	r0, [r7, #0]
 8007aa8:	f000 fafc 	bl	80080a4 <prvAddCurrentTaskToDelayedList>
}
 8007aac:	bf00      	nop
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20000364 	.word	0x20000364

08007ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	60fb      	str	r3, [r7, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff f8b1 	bl	8006c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aee:	4b1d      	ldr	r3, [pc, #116]	; (8007b64 <xTaskRemoveFromEventList+0xac>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d11c      	bne.n	8007b30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f8a8 	bl	8006c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	2201      	movs	r2, #1
 8007b06:	409a      	lsls	r2, r3
 8007b08:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <xTaskRemoveFromEventList+0xb0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	4a16      	ldr	r2, [pc, #88]	; (8007b68 <xTaskRemoveFromEventList+0xb0>)
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b16:	4613      	mov	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4a13      	ldr	r2, [pc, #76]	; (8007b6c <xTaskRemoveFromEventList+0xb4>)
 8007b20:	441a      	add	r2, r3
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	3304      	adds	r3, #4
 8007b26:	4619      	mov	r1, r3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f7ff f834 	bl	8006b96 <vListInsertEnd>
 8007b2e:	e005      	b.n	8007b3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	3318      	adds	r3, #24
 8007b34:	4619      	mov	r1, r3
 8007b36:	480e      	ldr	r0, [pc, #56]	; (8007b70 <xTaskRemoveFromEventList+0xb8>)
 8007b38:	f7ff f82d 	bl	8006b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b40:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <xTaskRemoveFromEventList+0xbc>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d905      	bls.n	8007b56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <xTaskRemoveFromEventList+0xc0>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e001      	b.n	8007b5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b5a:	697b      	ldr	r3, [r7, #20]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	2000048c 	.word	0x2000048c
 8007b68:	2000046c 	.word	0x2000046c
 8007b6c:	20000368 	.word	0x20000368
 8007b70:	20000424 	.word	0x20000424
 8007b74:	20000364 	.word	0x20000364
 8007b78:	20000478 	.word	0x20000478

08007b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b84:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <vTaskInternalSetTimeOutState+0x24>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <vTaskInternalSetTimeOutState+0x28>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	605a      	str	r2, [r3, #4]
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	2000047c 	.word	0x2000047c
 8007ba4:	20000468 	.word	0x20000468

08007ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	613b      	str	r3, [r7, #16]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007bea:	f000 fbeb 	bl	80083c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bee:	4b1d      	ldr	r3, [pc, #116]	; (8007c64 <xTaskCheckForTimeOut+0xbc>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d102      	bne.n	8007c0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61fb      	str	r3, [r7, #28]
 8007c0c:	e023      	b.n	8007c56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <xTaskCheckForTimeOut+0xc0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d007      	beq.n	8007c2a <xTaskCheckForTimeOut+0x82>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d302      	bcc.n	8007c2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	e015      	b.n	8007c56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d20b      	bcs.n	8007c4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	1ad2      	subs	r2, r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff ff9b 	bl	8007b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61fb      	str	r3, [r7, #28]
 8007c4a:	e004      	b.n	8007c56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c52:	2301      	movs	r3, #1
 8007c54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c56:	f000 fbe5 	bl	8008424 <vPortExitCritical>

	return xReturn;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	20000468 	.word	0x20000468
 8007c68:	2000047c 	.word	0x2000047c

08007c6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c70:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <vTaskMissedYield+0x14>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
}
 8007c76:	bf00      	nop
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20000478 	.word	0x20000478

08007c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c8c:	f000 f852 	bl	8007d34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c90:	4b06      	ldr	r3, [pc, #24]	; (8007cac <prvIdleTask+0x28>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d9f9      	bls.n	8007c8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <prvIdleTask+0x2c>)
 8007c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ca8:	e7f0      	b.n	8007c8c <prvIdleTask+0x8>
 8007caa:	bf00      	nop
 8007cac:	20000368 	.word	0x20000368
 8007cb0:	e000ed04 	.word	0xe000ed04

08007cb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cba:	2300      	movs	r3, #0
 8007cbc:	607b      	str	r3, [r7, #4]
 8007cbe:	e00c      	b.n	8007cda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4a12      	ldr	r2, [pc, #72]	; (8007d14 <prvInitialiseTaskLists+0x60>)
 8007ccc:	4413      	add	r3, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe ff34 	bl	8006b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b06      	cmp	r3, #6
 8007cde:	d9ef      	bls.n	8007cc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ce0:	480d      	ldr	r0, [pc, #52]	; (8007d18 <prvInitialiseTaskLists+0x64>)
 8007ce2:	f7fe ff2b 	bl	8006b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ce6:	480d      	ldr	r0, [pc, #52]	; (8007d1c <prvInitialiseTaskLists+0x68>)
 8007ce8:	f7fe ff28 	bl	8006b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cec:	480c      	ldr	r0, [pc, #48]	; (8007d20 <prvInitialiseTaskLists+0x6c>)
 8007cee:	f7fe ff25 	bl	8006b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cf2:	480c      	ldr	r0, [pc, #48]	; (8007d24 <prvInitialiseTaskLists+0x70>)
 8007cf4:	f7fe ff22 	bl	8006b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cf8:	480b      	ldr	r0, [pc, #44]	; (8007d28 <prvInitialiseTaskLists+0x74>)
 8007cfa:	f7fe ff1f 	bl	8006b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <prvInitialiseTaskLists+0x78>)
 8007d00:	4a05      	ldr	r2, [pc, #20]	; (8007d18 <prvInitialiseTaskLists+0x64>)
 8007d02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <prvInitialiseTaskLists+0x7c>)
 8007d06:	4a05      	ldr	r2, [pc, #20]	; (8007d1c <prvInitialiseTaskLists+0x68>)
 8007d08:	601a      	str	r2, [r3, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000368 	.word	0x20000368
 8007d18:	200003f4 	.word	0x200003f4
 8007d1c:	20000408 	.word	0x20000408
 8007d20:	20000424 	.word	0x20000424
 8007d24:	20000438 	.word	0x20000438
 8007d28:	20000450 	.word	0x20000450
 8007d2c:	2000041c 	.word	0x2000041c
 8007d30:	20000420 	.word	0x20000420

08007d34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d3a:	e019      	b.n	8007d70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d3c:	f000 fb42 	bl	80083c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d40:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <prvCheckTasksWaitingTermination+0x50>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe ff7f 	bl	8006c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d52:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <prvCheckTasksWaitingTermination+0x54>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	4a0b      	ldr	r2, [pc, #44]	; (8007d88 <prvCheckTasksWaitingTermination+0x54>)
 8007d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <prvCheckTasksWaitingTermination+0x58>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <prvCheckTasksWaitingTermination+0x58>)
 8007d64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d66:	f000 fb5d 	bl	8008424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f810 	bl	8007d90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <prvCheckTasksWaitingTermination+0x58>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e1      	bne.n	8007d3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000438 	.word	0x20000438
 8007d88:	20000464 	.word	0x20000464
 8007d8c:	2000044c 	.word	0x2000044c

08007d90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	334c      	adds	r3, #76	; 0x4c
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fe67 	bl	8008a70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d108      	bne.n	8007dbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fcf5 	bl	80087a0 <vPortFree>
				vPortFree( pxTCB );
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fcf2 	bl	80087a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dbc:	e018      	b.n	8007df0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d103      	bne.n	8007dd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fce9 	bl	80087a0 <vPortFree>
	}
 8007dce:	e00f      	b.n	8007df0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d00a      	beq.n	8007df0 <prvDeleteTCB+0x60>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	60fb      	str	r3, [r7, #12]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <prvDeleteTCB+0x5e>
	}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <prvResetNextTaskUnblockTime+0x38>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <prvResetNextTaskUnblockTime+0x3c>)
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e10:	e008      	b.n	8007e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <prvResetNextTaskUnblockTime+0x38>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a04      	ldr	r2, [pc, #16]	; (8007e34 <prvResetNextTaskUnblockTime+0x3c>)
 8007e22:	6013      	str	r3, [r2, #0]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	2000041c 	.word	0x2000041c
 8007e34:	20000484 	.word	0x20000484

08007e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <xTaskGetSchedulerState+0x34>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e46:	2301      	movs	r3, #1
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	e008      	b.n	8007e5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e4c:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <xTaskGetSchedulerState+0x38>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e54:	2302      	movs	r3, #2
 8007e56:	607b      	str	r3, [r7, #4]
 8007e58:	e001      	b.n	8007e5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e5e:	687b      	ldr	r3, [r7, #4]
	}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	20000470 	.word	0x20000470
 8007e70:	2000048c 	.word	0x2000048c

08007e74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d05e      	beq.n	8007f48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	4b31      	ldr	r3, [pc, #196]	; (8007f54 <xTaskPriorityInherit+0xe0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d24e      	bcs.n	8007f36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	db06      	blt.n	8007eae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea0:	4b2c      	ldr	r3, [pc, #176]	; (8007f54 <xTaskPriorityInherit+0xe0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	f1c3 0207 	rsb	r2, r3, #7
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6959      	ldr	r1, [r3, #20]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4a26      	ldr	r2, [pc, #152]	; (8007f58 <xTaskPriorityInherit+0xe4>)
 8007ec0:	4413      	add	r3, r2
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	d12f      	bne.n	8007f26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fec0 	bl	8006c50 <uxListRemove>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10a      	bne.n	8007eec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	2201      	movs	r2, #1
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	43da      	mvns	r2, r3
 8007ee2:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <xTaskPriorityInherit+0xe8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <xTaskPriorityInherit+0xe8>)
 8007eea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007eec:	4b19      	ldr	r3, [pc, #100]	; (8007f54 <xTaskPriorityInherit+0xe0>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	2201      	movs	r2, #1
 8007efc:	409a      	lsls	r2, r3
 8007efe:	4b17      	ldr	r3, [pc, #92]	; (8007f5c <xTaskPriorityInherit+0xe8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	4a15      	ldr	r2, [pc, #84]	; (8007f5c <xTaskPriorityInherit+0xe8>)
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <xTaskPriorityInherit+0xe4>)
 8007f16:	441a      	add	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	f7fe fe39 	bl	8006b96 <vListInsertEnd>
 8007f24:	e004      	b.n	8007f30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <xTaskPriorityInherit+0xe0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e008      	b.n	8007f48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f3a:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <xTaskPriorityInherit+0xe0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d201      	bcs.n	8007f48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f48:	68fb      	ldr	r3, [r7, #12]
	}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000364 	.word	0x20000364
 8007f58:	20000368 	.word	0x20000368
 8007f5c:	2000046c 	.word	0x2000046c

08007f60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d077      	beq.n	8008068 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d902      	bls.n	8007fa6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	e002      	b.n	8007fac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007faa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d058      	beq.n	8008068 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d153      	bne.n	8008068 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fc0:	4b2b      	ldr	r3, [pc, #172]	; (8008070 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d10a      	bne.n	8007fe0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	60bb      	str	r3, [r7, #8]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	db04      	blt.n	8007ffe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f1c3 0207 	rsb	r2, r3, #7
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	6959      	ldr	r1, [r3, #20]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a19      	ldr	r2, [pc, #100]	; (8008074 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800800e:	4413      	add	r3, r2
 8008010:	4299      	cmp	r1, r3
 8008012:	d129      	bne.n	8008068 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	3304      	adds	r3, #4
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe fe19 	bl	8006c50 <uxListRemove>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	2201      	movs	r2, #1
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	43da      	mvns	r2, r3
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4013      	ands	r3, r2
 8008036:	4a10      	ldr	r2, [pc, #64]	; (8008078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008038:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	2201      	movs	r2, #1
 8008040:	409a      	lsls	r2, r3
 8008042:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4313      	orrs	r3, r2
 8008048:	4a0b      	ldr	r2, [pc, #44]	; (8008078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a06      	ldr	r2, [pc, #24]	; (8008074 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800805a:	441a      	add	r2, r3
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7fe fd97 	bl	8006b96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008068:	bf00      	nop
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000364 	.word	0x20000364
 8008074:	20000368 	.word	0x20000368
 8008078:	2000046c 	.word	0x2000046c

0800807c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008080:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008088:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800808e:	3201      	adds	r2, #1
 8008090:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008092:	4b03      	ldr	r3, [pc, #12]	; (80080a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008094:	681b      	ldr	r3, [r3, #0]
	}
 8008096:	4618      	mov	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20000364 	.word	0x20000364

080080a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080ae:	4b29      	ldr	r3, [pc, #164]	; (8008154 <prvAddCurrentTaskToDelayedList+0xb0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b4:	4b28      	ldr	r3, [pc, #160]	; (8008158 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fdc8 	bl	8006c50 <uxListRemove>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80080c6:	4b24      	ldr	r3, [pc, #144]	; (8008158 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	2201      	movs	r2, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	43da      	mvns	r2, r3
 80080d4:	4b21      	ldr	r3, [pc, #132]	; (800815c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4013      	ands	r3, r2
 80080da:	4a20      	ldr	r2, [pc, #128]	; (800815c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d10a      	bne.n	80080fc <prvAddCurrentTaskToDelayedList+0x58>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ec:	4b1a      	ldr	r3, [pc, #104]	; (8008158 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	481a      	ldr	r0, [pc, #104]	; (8008160 <prvAddCurrentTaskToDelayedList+0xbc>)
 80080f6:	f7fe fd4e 	bl	8006b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080fa:	e026      	b.n	800814a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008104:	4b14      	ldr	r3, [pc, #80]	; (8008158 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	429a      	cmp	r2, r3
 8008112:	d209      	bcs.n	8008128 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008114:	4b13      	ldr	r3, [pc, #76]	; (8008164 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3304      	adds	r3, #4
 800811e:	4619      	mov	r1, r3
 8008120:	4610      	mov	r0, r2
 8008122:	f7fe fd5c 	bl	8006bde <vListInsert>
}
 8008126:	e010      	b.n	800814a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008128:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <prvAddCurrentTaskToDelayedList+0xc4>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3304      	adds	r3, #4
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f7fe fd52 	bl	8006bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800813a:	4b0c      	ldr	r3, [pc, #48]	; (800816c <prvAddCurrentTaskToDelayedList+0xc8>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	429a      	cmp	r2, r3
 8008142:	d202      	bcs.n	800814a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008144:	4a09      	ldr	r2, [pc, #36]	; (800816c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6013      	str	r3, [r2, #0]
}
 800814a:	bf00      	nop
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000468 	.word	0x20000468
 8008158:	20000364 	.word	0x20000364
 800815c:	2000046c 	.word	0x2000046c
 8008160:	20000450 	.word	0x20000450
 8008164:	20000420 	.word	0x20000420
 8008168:	2000041c 	.word	0x2000041c
 800816c:	20000484 	.word	0x20000484

08008170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3b04      	subs	r3, #4
 8008180:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3b04      	subs	r3, #4
 800818e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f023 0201 	bic.w	r2, r3, #1
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3b04      	subs	r3, #4
 800819e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081a0:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <pxPortInitialiseStack+0x64>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3b14      	subs	r3, #20
 80081aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3b04      	subs	r3, #4
 80081b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f06f 0202 	mvn.w	r2, #2
 80081be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3b20      	subs	r3, #32
 80081c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081c6:	68fb      	ldr	r3, [r7, #12]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	080081d9 	.word	0x080081d9

080081d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <prvTaskExitError+0x54>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d00a      	beq.n	8008202 <prvTaskExitError+0x2a>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	60fb      	str	r3, [r7, #12]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <prvTaskExitError+0x28>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008216:	bf00      	nop
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0fc      	beq.n	8008218 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20000024 	.word	0x20000024

08008230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <pxCurrentTCBConst2>)
 8008232:	6819      	ldr	r1, [r3, #0]
 8008234:	6808      	ldr	r0, [r1, #0]
 8008236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	f380 8809 	msr	PSP, r0
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f04f 0000 	mov.w	r0, #0
 8008246:	f380 8811 	msr	BASEPRI, r0
 800824a:	4770      	bx	lr
 800824c:	f3af 8000 	nop.w

08008250 <pxCurrentTCBConst2>:
 8008250:	20000364 	.word	0x20000364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop

08008258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008258:	4808      	ldr	r0, [pc, #32]	; (800827c <prvPortStartFirstTask+0x24>)
 800825a:	6800      	ldr	r0, [r0, #0]
 800825c:	6800      	ldr	r0, [r0, #0]
 800825e:	f380 8808 	msr	MSP, r0
 8008262:	f04f 0000 	mov.w	r0, #0
 8008266:	f380 8814 	msr	CONTROL, r0
 800826a:	b662      	cpsie	i
 800826c:	b661      	cpsie	f
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	df00      	svc	0
 8008278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800827a:	bf00      	nop
 800827c:	e000ed08 	.word	0xe000ed08

08008280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008286:	4b46      	ldr	r3, [pc, #280]	; (80083a0 <xPortStartScheduler+0x120>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a46      	ldr	r2, [pc, #280]	; (80083a4 <xPortStartScheduler+0x124>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d10a      	bne.n	80082a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	613b      	str	r3, [r7, #16]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082a6:	4b3e      	ldr	r3, [pc, #248]	; (80083a0 <xPortStartScheduler+0x120>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a3f      	ldr	r2, [pc, #252]	; (80083a8 <xPortStartScheduler+0x128>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d10a      	bne.n	80082c6 <xPortStartScheduler+0x46>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60fb      	str	r3, [r7, #12]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082c6:	4b39      	ldr	r3, [pc, #228]	; (80083ac <xPortStartScheduler+0x12c>)
 80082c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	22ff      	movs	r2, #255	; 0xff
 80082d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	4b31      	ldr	r3, [pc, #196]	; (80083b0 <xPortStartScheduler+0x130>)
 80082ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ee:	4b31      	ldr	r3, [pc, #196]	; (80083b4 <xPortStartScheduler+0x134>)
 80082f0:	2207      	movs	r2, #7
 80082f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082f4:	e009      	b.n	800830a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80082f6:	4b2f      	ldr	r3, [pc, #188]	; (80083b4 <xPortStartScheduler+0x134>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	4a2d      	ldr	r2, [pc, #180]	; (80083b4 <xPortStartScheduler+0x134>)
 80082fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	b2db      	uxtb	r3, r3
 8008308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d0ef      	beq.n	80082f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008316:	4b27      	ldr	r3, [pc, #156]	; (80083b4 <xPortStartScheduler+0x134>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f1c3 0307 	rsb	r3, r3, #7
 800831e:	2b04      	cmp	r3, #4
 8008320:	d00a      	beq.n	8008338 <xPortStartScheduler+0xb8>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	60bb      	str	r3, [r7, #8]
}
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008338:	4b1e      	ldr	r3, [pc, #120]	; (80083b4 <xPortStartScheduler+0x134>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	021b      	lsls	r3, r3, #8
 800833e:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <xPortStartScheduler+0x134>)
 8008340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008342:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <xPortStartScheduler+0x134>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800834a:	4a1a      	ldr	r2, [pc, #104]	; (80083b4 <xPortStartScheduler+0x134>)
 800834c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	b2da      	uxtb	r2, r3
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008356:	4b18      	ldr	r3, [pc, #96]	; (80083b8 <xPortStartScheduler+0x138>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a17      	ldr	r2, [pc, #92]	; (80083b8 <xPortStartScheduler+0x138>)
 800835c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <xPortStartScheduler+0x138>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <xPortStartScheduler+0x138>)
 8008368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800836c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800836e:	f000 f8dd 	bl	800852c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <xPortStartScheduler+0x13c>)
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008378:	f000 f8fc 	bl	8008574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800837c:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <xPortStartScheduler+0x140>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a0f      	ldr	r2, [pc, #60]	; (80083c0 <xPortStartScheduler+0x140>)
 8008382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008386:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008388:	f7ff ff66 	bl	8008258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800838c:	f7ff fb0e 	bl	80079ac <vTaskSwitchContext>
	prvTaskExitError();
 8008390:	f7ff ff22 	bl	80081d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	e000ed00 	.word	0xe000ed00
 80083a4:	410fc271 	.word	0x410fc271
 80083a8:	410fc270 	.word	0x410fc270
 80083ac:	e000e400 	.word	0xe000e400
 80083b0:	20000490 	.word	0x20000490
 80083b4:	20000494 	.word	0x20000494
 80083b8:	e000ed20 	.word	0xe000ed20
 80083bc:	20000024 	.word	0x20000024
 80083c0:	e000ef34 	.word	0xe000ef34

080083c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	607b      	str	r3, [r7, #4]
}
 80083dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083de:	4b0f      	ldr	r3, [pc, #60]	; (800841c <vPortEnterCritical+0x58>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	4a0d      	ldr	r2, [pc, #52]	; (800841c <vPortEnterCritical+0x58>)
 80083e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <vPortEnterCritical+0x58>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d10f      	bne.n	8008410 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <vPortEnterCritical+0x5c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <vPortEnterCritical+0x4c>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	603b      	str	r3, [r7, #0]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <vPortEnterCritical+0x4a>
	}
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000024 	.word	0x20000024
 8008420:	e000ed04 	.word	0xe000ed04

08008424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <vPortExitCritical+0x50>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <vPortExitCritical+0x24>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	607b      	str	r3, [r7, #4]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008448:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <vPortExitCritical+0x50>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3b01      	subs	r3, #1
 800844e:	4a09      	ldr	r2, [pc, #36]	; (8008474 <vPortExitCritical+0x50>)
 8008450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008452:	4b08      	ldr	r3, [pc, #32]	; (8008474 <vPortExitCritical+0x50>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d105      	bne.n	8008466 <vPortExitCritical+0x42>
 800845a:	2300      	movs	r3, #0
 800845c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	f383 8811 	msr	BASEPRI, r3
}
 8008464:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000024 	.word	0x20000024
	...

08008480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008480:	f3ef 8009 	mrs	r0, PSP
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <pxCurrentTCBConst>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	f01e 0f10 	tst.w	lr, #16
 8008490:	bf08      	it	eq
 8008492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849a:	6010      	str	r0, [r2, #0]
 800849c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084a4:	f380 8811 	msr	BASEPRI, r0
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f7ff fa7c 	bl	80079ac <vTaskSwitchContext>
 80084b4:	f04f 0000 	mov.w	r0, #0
 80084b8:	f380 8811 	msr	BASEPRI, r0
 80084bc:	bc09      	pop	{r0, r3}
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	6808      	ldr	r0, [r1, #0]
 80084c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c6:	f01e 0f10 	tst.w	lr, #16
 80084ca:	bf08      	it	eq
 80084cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084d0:	f380 8809 	msr	PSP, r0
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w

080084e0 <pxCurrentTCBConst>:
 80084e0:	20000364 	.word	0x20000364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop

080084e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
}
 8008500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008502:	f7ff f99b 	bl	800783c <xTaskIncrementTick>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800850c:	4b06      	ldr	r3, [pc, #24]	; (8008528 <xPortSysTickHandler+0x40>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f383 8811 	msr	BASEPRI, r3
}
 800851e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008530:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <vPortSetupTimerInterrupt+0x34>)
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <vPortSetupTimerInterrupt+0x38>)
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800853c:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <vPortSetupTimerInterrupt+0x3c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a0a      	ldr	r2, [pc, #40]	; (800856c <vPortSetupTimerInterrupt+0x40>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	099b      	lsrs	r3, r3, #6
 8008548:	4a09      	ldr	r2, [pc, #36]	; (8008570 <vPortSetupTimerInterrupt+0x44>)
 800854a:	3b01      	subs	r3, #1
 800854c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800854e:	4b04      	ldr	r3, [pc, #16]	; (8008560 <vPortSetupTimerInterrupt+0x34>)
 8008550:	2207      	movs	r2, #7
 8008552:	601a      	str	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	e000e010 	.word	0xe000e010
 8008564:	e000e018 	.word	0xe000e018
 8008568:	20000018 	.word	0x20000018
 800856c:	10624dd3 	.word	0x10624dd3
 8008570:	e000e014 	.word	0xe000e014

08008574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008584 <vPortEnableVFP+0x10>
 8008578:	6801      	ldr	r1, [r0, #0]
 800857a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800857e:	6001      	str	r1, [r0, #0]
 8008580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008582:	bf00      	nop
 8008584:	e000ed88 	.word	0xe000ed88

08008588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800858e:	f3ef 8305 	mrs	r3, IPSR
 8008592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b0f      	cmp	r3, #15
 8008598:	d914      	bls.n	80085c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800859a:	4a17      	ldr	r2, [pc, #92]	; (80085f8 <vPortValidateInterruptPriority+0x70>)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085a4:	4b15      	ldr	r3, [pc, #84]	; (80085fc <vPortValidateInterruptPriority+0x74>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	7afa      	ldrb	r2, [r7, #11]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d20a      	bcs.n	80085c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	607b      	str	r3, [r7, #4]
}
 80085c0:	bf00      	nop
 80085c2:	e7fe      	b.n	80085c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085c4:	4b0e      	ldr	r3, [pc, #56]	; (8008600 <vPortValidateInterruptPriority+0x78>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <vPortValidateInterruptPriority+0x7c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d90a      	bls.n	80085ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	603b      	str	r3, [r7, #0]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <vPortValidateInterruptPriority+0x60>
	}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	e000e3f0 	.word	0xe000e3f0
 80085fc:	20000490 	.word	0x20000490
 8008600:	e000ed0c 	.word	0xe000ed0c
 8008604:	20000494 	.word	0x20000494

08008608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08a      	sub	sp, #40	; 0x28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008614:	f7ff f868 	bl	80076e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008618:	4b5b      	ldr	r3, [pc, #364]	; (8008788 <pvPortMalloc+0x180>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008620:	f000 f920 	bl	8008864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008624:	4b59      	ldr	r3, [pc, #356]	; (800878c <pvPortMalloc+0x184>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4013      	ands	r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8093 	bne.w	8008758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01d      	beq.n	8008674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008638:	2208      	movs	r2, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d014      	beq.n	8008674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	3308      	adds	r3, #8
 8008652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <pvPortMalloc+0x6c>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	617b      	str	r3, [r7, #20]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d06e      	beq.n	8008758 <pvPortMalloc+0x150>
 800867a:	4b45      	ldr	r3, [pc, #276]	; (8008790 <pvPortMalloc+0x188>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d869      	bhi.n	8008758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008684:	4b43      	ldr	r3, [pc, #268]	; (8008794 <pvPortMalloc+0x18c>)
 8008686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008688:	4b42      	ldr	r3, [pc, #264]	; (8008794 <pvPortMalloc+0x18c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800868e:	e004      	b.n	800869a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d903      	bls.n	80086ac <pvPortMalloc+0xa4>
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1f1      	bne.n	8008690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086ac:	4b36      	ldr	r3, [pc, #216]	; (8008788 <pvPortMalloc+0x180>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d050      	beq.n	8008758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2208      	movs	r2, #8
 80086bc:	4413      	add	r3, r2
 80086be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	1ad2      	subs	r2, r2, r3
 80086d0:	2308      	movs	r3, #8
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d91f      	bls.n	8008718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <pvPortMalloc+0xf8>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	613b      	str	r3, [r7, #16]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	1ad2      	subs	r2, r2, r3
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008712:	69b8      	ldr	r0, [r7, #24]
 8008714:	f000 f908 	bl	8008928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008718:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <pvPortMalloc+0x188>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <pvPortMalloc+0x188>)
 8008724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008726:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <pvPortMalloc+0x188>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	4b1b      	ldr	r3, [pc, #108]	; (8008798 <pvPortMalloc+0x190>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d203      	bcs.n	800873a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008732:	4b17      	ldr	r3, [pc, #92]	; (8008790 <pvPortMalloc+0x188>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a18      	ldr	r2, [pc, #96]	; (8008798 <pvPortMalloc+0x190>)
 8008738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	4b13      	ldr	r3, [pc, #76]	; (800878c <pvPortMalloc+0x184>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	431a      	orrs	r2, r3
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800874e:	4b13      	ldr	r3, [pc, #76]	; (800879c <pvPortMalloc+0x194>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3301      	adds	r3, #1
 8008754:	4a11      	ldr	r2, [pc, #68]	; (800879c <pvPortMalloc+0x194>)
 8008756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008758:	f7fe ffd4 	bl	8007704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <pvPortMalloc+0x174>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60fb      	str	r3, [r7, #12]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <pvPortMalloc+0x172>
	return pvReturn;
 800877c:	69fb      	ldr	r3, [r7, #28]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3728      	adds	r7, #40	; 0x28
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20001058 	.word	0x20001058
 800878c:	2000106c 	.word	0x2000106c
 8008790:	2000105c 	.word	0x2000105c
 8008794:	20001050 	.word	0x20001050
 8008798:	20001060 	.word	0x20001060
 800879c:	20001064 	.word	0x20001064

080087a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d04d      	beq.n	800884e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087b2:	2308      	movs	r3, #8
 80087b4:	425b      	negs	r3, r3
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	4413      	add	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	4b24      	ldr	r3, [pc, #144]	; (8008858 <vPortFree+0xb8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4013      	ands	r3, r2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <vPortFree+0x44>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	60fb      	str	r3, [r7, #12]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <vPortFree+0x62>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	60bb      	str	r3, [r7, #8]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <vPortFree+0xb8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01e      	beq.n	800884e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d11a      	bne.n	800884e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <vPortFree+0xb8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	43db      	mvns	r3, r3
 8008822:	401a      	ands	r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008828:	f7fe ff5e 	bl	80076e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <vPortFree+0xbc>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4413      	add	r3, r2
 8008836:	4a09      	ldr	r2, [pc, #36]	; (800885c <vPortFree+0xbc>)
 8008838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800883a:	6938      	ldr	r0, [r7, #16]
 800883c:	f000 f874 	bl	8008928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008840:	4b07      	ldr	r3, [pc, #28]	; (8008860 <vPortFree+0xc0>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	4a06      	ldr	r2, [pc, #24]	; (8008860 <vPortFree+0xc0>)
 8008848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800884a:	f7fe ff5b 	bl	8007704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800884e:	bf00      	nop
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	2000106c 	.word	0x2000106c
 800885c:	2000105c 	.word	0x2000105c
 8008860:	20001068 	.word	0x20001068

08008864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800886a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800886e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008870:	4b27      	ldr	r3, [pc, #156]	; (8008910 <prvHeapInit+0xac>)
 8008872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3307      	adds	r3, #7
 8008882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0307 	bic.w	r3, r3, #7
 800888a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	4a1f      	ldr	r2, [pc, #124]	; (8008910 <prvHeapInit+0xac>)
 8008894:	4413      	add	r3, r2
 8008896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800889c:	4a1d      	ldr	r2, [pc, #116]	; (8008914 <prvHeapInit+0xb0>)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088a2:	4b1c      	ldr	r3, [pc, #112]	; (8008914 <prvHeapInit+0xb0>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088b0:	2208      	movs	r2, #8
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a15      	ldr	r2, [pc, #84]	; (8008918 <prvHeapInit+0xb4>)
 80088c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088c6:	4b14      	ldr	r3, [pc, #80]	; (8008918 <prvHeapInit+0xb4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ce:	4b12      	ldr	r3, [pc, #72]	; (8008918 <prvHeapInit+0xb4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088e4:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <prvHeapInit+0xb4>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	; (800891c <prvHeapInit+0xb8>)
 80088f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4a09      	ldr	r2, [pc, #36]	; (8008920 <prvHeapInit+0xbc>)
 80088fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088fc:	4b09      	ldr	r3, [pc, #36]	; (8008924 <prvHeapInit+0xc0>)
 80088fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20000498 	.word	0x20000498
 8008914:	20001050 	.word	0x20001050
 8008918:	20001058 	.word	0x20001058
 800891c:	20001060 	.word	0x20001060
 8008920:	2000105c 	.word	0x2000105c
 8008924:	2000106c 	.word	0x2000106c

08008928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008930:	4b28      	ldr	r3, [pc, #160]	; (80089d4 <prvInsertBlockIntoFreeList+0xac>)
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	e002      	b.n	800893c <prvInsertBlockIntoFreeList+0x14>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d8f7      	bhi.n	8008936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	4413      	add	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d108      	bne.n	800896a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	441a      	add	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	441a      	add	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d118      	bne.n	80089b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d00d      	beq.n	80089a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	441a      	add	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	e008      	b.n	80089b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089a6:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <prvInsertBlockIntoFreeList+0xb0>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e003      	b.n	80089b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d002      	beq.n	80089c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20001050 	.word	0x20001050
 80089d8:	20001058 	.word	0x20001058

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4d0d      	ldr	r5, [pc, #52]	; (8008a14 <__libc_init_array+0x38>)
 80089e0:	4c0d      	ldr	r4, [pc, #52]	; (8008a18 <__libc_init_array+0x3c>)
 80089e2:	1b64      	subs	r4, r4, r5
 80089e4:	10a4      	asrs	r4, r4, #2
 80089e6:	2600      	movs	r6, #0
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	4d0b      	ldr	r5, [pc, #44]	; (8008a1c <__libc_init_array+0x40>)
 80089ee:	4c0c      	ldr	r4, [pc, #48]	; (8008a20 <__libc_init_array+0x44>)
 80089f0:	f000 f8f6 	bl	8008be0 <_init>
 80089f4:	1b64      	subs	r4, r4, r5
 80089f6:	10a4      	asrs	r4, r4, #2
 80089f8:	2600      	movs	r6, #0
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	08008cc4 	.word	0x08008cc4
 8008a18:	08008cc4 	.word	0x08008cc4
 8008a1c:	08008cc4 	.word	0x08008cc4
 8008a20:	08008cc8 	.word	0x08008cc8

08008a24 <__retarget_lock_acquire_recursive>:
 8008a24:	4770      	bx	lr

08008a26 <__retarget_lock_release_recursive>:
 8008a26:	4770      	bx	lr

08008a28 <memcpy>:
 8008a28:	440a      	add	r2, r1
 8008a2a:	4291      	cmp	r1, r2
 8008a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a30:	d100      	bne.n	8008a34 <memcpy+0xc>
 8008a32:	4770      	bx	lr
 8008a34:	b510      	push	{r4, lr}
 8008a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3e:	4291      	cmp	r1, r2
 8008a40:	d1f9      	bne.n	8008a36 <memcpy+0xe>
 8008a42:	bd10      	pop	{r4, pc}

08008a44 <memset>:
 8008a44:	4402      	add	r2, r0
 8008a46:	4603      	mov	r3, r0
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d100      	bne.n	8008a4e <memset+0xa>
 8008a4c:	4770      	bx	lr
 8008a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a52:	e7f9      	b.n	8008a48 <memset+0x4>

08008a54 <cleanup_glue>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	460c      	mov	r4, r1
 8008a58:	6809      	ldr	r1, [r1, #0]
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	b109      	cbz	r1, 8008a62 <cleanup_glue+0xe>
 8008a5e:	f7ff fff9 	bl	8008a54 <cleanup_glue>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4628      	mov	r0, r5
 8008a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6a:	f000 b869 	b.w	8008b40 <_free_r>
	...

08008a70 <_reclaim_reent>:
 8008a70:	4b2c      	ldr	r3, [pc, #176]	; (8008b24 <_reclaim_reent+0xb4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4283      	cmp	r3, r0
 8008a76:	b570      	push	{r4, r5, r6, lr}
 8008a78:	4604      	mov	r4, r0
 8008a7a:	d051      	beq.n	8008b20 <_reclaim_reent+0xb0>
 8008a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a7e:	b143      	cbz	r3, 8008a92 <_reclaim_reent+0x22>
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d14a      	bne.n	8008b1c <_reclaim_reent+0xac>
 8008a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	b111      	cbz	r1, 8008a92 <_reclaim_reent+0x22>
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 f857 	bl	8008b40 <_free_r>
 8008a92:	6961      	ldr	r1, [r4, #20]
 8008a94:	b111      	cbz	r1, 8008a9c <_reclaim_reent+0x2c>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 f852 	bl	8008b40 <_free_r>
 8008a9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a9e:	b111      	cbz	r1, 8008aa6 <_reclaim_reent+0x36>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f84d 	bl	8008b40 <_free_r>
 8008aa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008aa8:	b111      	cbz	r1, 8008ab0 <_reclaim_reent+0x40>
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 f848 	bl	8008b40 <_free_r>
 8008ab0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ab2:	b111      	cbz	r1, 8008aba <_reclaim_reent+0x4a>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 f843 	bl	8008b40 <_free_r>
 8008aba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008abc:	b111      	cbz	r1, 8008ac4 <_reclaim_reent+0x54>
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f83e 	bl	8008b40 <_free_r>
 8008ac4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ac6:	b111      	cbz	r1, 8008ace <_reclaim_reent+0x5e>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 f839 	bl	8008b40 <_free_r>
 8008ace:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ad0:	b111      	cbz	r1, 8008ad8 <_reclaim_reent+0x68>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 f834 	bl	8008b40 <_free_r>
 8008ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ada:	b111      	cbz	r1, 8008ae2 <_reclaim_reent+0x72>
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 f82f 	bl	8008b40 <_free_r>
 8008ae2:	69a3      	ldr	r3, [r4, #24]
 8008ae4:	b1e3      	cbz	r3, 8008b20 <_reclaim_reent+0xb0>
 8008ae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4798      	blx	r3
 8008aec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008aee:	b1b9      	cbz	r1, 8008b20 <_reclaim_reent+0xb0>
 8008af0:	4620      	mov	r0, r4
 8008af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008af6:	f7ff bfad 	b.w	8008a54 <cleanup_glue>
 8008afa:	5949      	ldr	r1, [r1, r5]
 8008afc:	b941      	cbnz	r1, 8008b10 <_reclaim_reent+0xa0>
 8008afe:	3504      	adds	r5, #4
 8008b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b02:	2d80      	cmp	r5, #128	; 0x80
 8008b04:	68d9      	ldr	r1, [r3, #12]
 8008b06:	d1f8      	bne.n	8008afa <_reclaim_reent+0x8a>
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f819 	bl	8008b40 <_free_r>
 8008b0e:	e7ba      	b.n	8008a86 <_reclaim_reent+0x16>
 8008b10:	680e      	ldr	r6, [r1, #0]
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 f814 	bl	8008b40 <_free_r>
 8008b18:	4631      	mov	r1, r6
 8008b1a:	e7ef      	b.n	8008afc <_reclaim_reent+0x8c>
 8008b1c:	2500      	movs	r5, #0
 8008b1e:	e7ef      	b.n	8008b00 <_reclaim_reent+0x90>
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
 8008b22:	bf00      	nop
 8008b24:	20000028 	.word	0x20000028

08008b28 <__malloc_lock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__malloc_lock+0x8>)
 8008b2a:	f7ff bf7b 	b.w	8008a24 <__retarget_lock_acquire_recursive>
 8008b2e:	bf00      	nop
 8008b30:	2000a950 	.word	0x2000a950

08008b34 <__malloc_unlock>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__malloc_unlock+0x8>)
 8008b36:	f7ff bf76 	b.w	8008a26 <__retarget_lock_release_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	2000a950 	.word	0x2000a950

08008b40 <_free_r>:
 8008b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b42:	2900      	cmp	r1, #0
 8008b44:	d048      	beq.n	8008bd8 <_free_r+0x98>
 8008b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b4a:	9001      	str	r0, [sp, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b52:	bfb8      	it	lt
 8008b54:	18e4      	addlt	r4, r4, r3
 8008b56:	f7ff ffe7 	bl	8008b28 <__malloc_lock>
 8008b5a:	4a20      	ldr	r2, [pc, #128]	; (8008bdc <_free_r+0x9c>)
 8008b5c:	9801      	ldr	r0, [sp, #4]
 8008b5e:	6813      	ldr	r3, [r2, #0]
 8008b60:	4615      	mov	r5, r2
 8008b62:	b933      	cbnz	r3, 8008b72 <_free_r+0x32>
 8008b64:	6063      	str	r3, [r4, #4]
 8008b66:	6014      	str	r4, [r2, #0]
 8008b68:	b003      	add	sp, #12
 8008b6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b6e:	f7ff bfe1 	b.w	8008b34 <__malloc_unlock>
 8008b72:	42a3      	cmp	r3, r4
 8008b74:	d90b      	bls.n	8008b8e <_free_r+0x4e>
 8008b76:	6821      	ldr	r1, [r4, #0]
 8008b78:	1862      	adds	r2, r4, r1
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	bf04      	itt	eq
 8008b7e:	681a      	ldreq	r2, [r3, #0]
 8008b80:	685b      	ldreq	r3, [r3, #4]
 8008b82:	6063      	str	r3, [r4, #4]
 8008b84:	bf04      	itt	eq
 8008b86:	1852      	addeq	r2, r2, r1
 8008b88:	6022      	streq	r2, [r4, #0]
 8008b8a:	602c      	str	r4, [r5, #0]
 8008b8c:	e7ec      	b.n	8008b68 <_free_r+0x28>
 8008b8e:	461a      	mov	r2, r3
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	b10b      	cbz	r3, 8008b98 <_free_r+0x58>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d9fa      	bls.n	8008b8e <_free_r+0x4e>
 8008b98:	6811      	ldr	r1, [r2, #0]
 8008b9a:	1855      	adds	r5, r2, r1
 8008b9c:	42a5      	cmp	r5, r4
 8008b9e:	d10b      	bne.n	8008bb8 <_free_r+0x78>
 8008ba0:	6824      	ldr	r4, [r4, #0]
 8008ba2:	4421      	add	r1, r4
 8008ba4:	1854      	adds	r4, r2, r1
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	6011      	str	r1, [r2, #0]
 8008baa:	d1dd      	bne.n	8008b68 <_free_r+0x28>
 8008bac:	681c      	ldr	r4, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	6053      	str	r3, [r2, #4]
 8008bb2:	4421      	add	r1, r4
 8008bb4:	6011      	str	r1, [r2, #0]
 8008bb6:	e7d7      	b.n	8008b68 <_free_r+0x28>
 8008bb8:	d902      	bls.n	8008bc0 <_free_r+0x80>
 8008bba:	230c      	movs	r3, #12
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	e7d3      	b.n	8008b68 <_free_r+0x28>
 8008bc0:	6825      	ldr	r5, [r4, #0]
 8008bc2:	1961      	adds	r1, r4, r5
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf04      	itt	eq
 8008bc8:	6819      	ldreq	r1, [r3, #0]
 8008bca:	685b      	ldreq	r3, [r3, #4]
 8008bcc:	6063      	str	r3, [r4, #4]
 8008bce:	bf04      	itt	eq
 8008bd0:	1949      	addeq	r1, r1, r5
 8008bd2:	6021      	streq	r1, [r4, #0]
 8008bd4:	6054      	str	r4, [r2, #4]
 8008bd6:	e7c7      	b.n	8008b68 <_free_r+0x28>
 8008bd8:	b003      	add	sp, #12
 8008bda:	bd30      	pop	{r4, r5, pc}
 8008bdc:	20001070 	.word	0x20001070

08008be0 <_init>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr

08008bec <_fini>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr
